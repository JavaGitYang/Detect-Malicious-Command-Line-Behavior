
       mq_notify() allows the calling process to register or unregister for
       delivery of an asynchronous notification when a new message arrives
       on the empty message queue referred to by the message queue
       descriptor mqdes.
       The sevp argument is a pointer to a sigevent structure.  For the
       definition and general details of this structure, see sigevent(7).
       If sevp is a non-null pointer, then mq_notify() registers the calling
       process to receive message notification.  The sigev_notify field of
       the sigevent structure to which sevp points specifies how
       notification is to be performed.  This field has one of the following
       values:
       SIGEV_NONE
              A "null" notification: the calling process is registered as
              the target for notification, but when a message arrives, no
              notification is sent.
       SIGEV_SIGNAL
              Notify the process by sending the signal specified in
              sigev_signo.  See sigevent(7) for general details.  The
              si_code field of the siginfo_t structure will be set to
              SI_MESGQ.  In addition, si_pid will be set to the PID of the
              process that sent the message, and si_uid will be set to the
              real user ID of the sending process.
       SIGEV_THREAD
              Upon message delivery, invoke sigev_notify_function as if it
              were the start function of a new thread.  See sigevent(7) for
              details.
       Only one process can be registered to receive notification from a
       message queue.
       If sevp is NULL, and the calling process is currently registered to
       receive notifications for this message queue, then the registration
       is removed; another process can then register to receive a message
       notification for this queue.
       Message notification occurs only when a new message arrives and the
       queue was previously empty.  If the queue was not empty at the time
       mq_notify() was called, then a notification will occur only after the
       queue is emptied and a new message arrives.
       If another process or thread is waiting to read a message from an
       empty queue using mq_receive(3), then any message notification
       registration is ignored: the message is delivered to the process or
       thread calling mq_receive(3), and the message notification
       registration remains in effect.
       Notification occurs once: after a notification is delivered, the
       notification registration is removed, and another process can
       register for message notification.  If the notified process wishes to
       receive the next notification, it can use mq_notify() to request a
       further notification.  This should be done before emptying all unread
       messages from the queue.  (Placing the queue in nonblocking mode is
       useful for emptying the queue of messages without blocking once it is
       empty.)
