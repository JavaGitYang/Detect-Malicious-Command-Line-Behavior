
       The popen() function shall execute the command specified by the
       string command.  It shall create a pipe between the calling program
       and the executed command, and shall return a pointer to a stream that
       can be used to either read from or write to the pipe.
       The environment of the executed command shall be as if a child
       process were created within the popen() call using the fork()
       function, and the child invoked the sh utility using the call:
           execl(shell path, "sh", "-c", command, (char *)0);
       where shell path is an unspecified pathname for the sh utility.
       The popen() function shall ensure that any streams from previous
       popen() calls that remain open in the parent process are closed in
       the new child process.
       The mode argument to popen() is a string that specifies I/O mode:
        1. If mode is r, when the child process is started, its file
           descriptor STDOUT_FILENO shall be the writable end of the pipe,
           and the file descriptor fileno(stream) in the calling process,
           where stream is the stream pointer returned by popen(), shall be
           the readable end of the pipe.
        2. If mode is w, when the child process is started its file
           descriptor STDIN_FILENO shall be the readable end of the pipe,
           and the file descriptor fileno(stream) in the calling process,
           where stream is the stream pointer returned by popen(), shall be
           the writable end of the pipe.
        3. If mode is any other value, the result is unspecified.
       After popen(), both the parent and the child process shall be capable
       of executing independently before either terminates.
       Pipe streams are byte-oriented.
