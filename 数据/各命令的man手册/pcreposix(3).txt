
       This set of functions provides a POSIX-style API for the PCRE regular
       expression 8-bit library. See the pcreapi documentation for a
       description of PCRE's native API, which contains much additional
       functionality. There is no POSIX-style wrapper for PCRE's 16-bit and
       32-bit library.
       The functions described here are just wrapper functions that
       ultimately call the PCRE native API. Their prototypes are defined in
       the pcreposix.h header file, and on Unix systems the library itself
       is called pcreposix.a, so can be accessed by adding -lpcreposix to
       the command for linking an application that uses them. Because the
       POSIX functions call the native ones, it is also necessary to add
       -lpcre.
       I have implemented only those POSIX option bits that can be
       reasonably mapped to PCRE native options. In addition, the option
       REG_EXTENDED is defined with the value zero. This has no effect, but
       since programs that are written to the POSIX interface often use it,
       this makes it easier to slot in PCRE as a replacement library. Other
       POSIX options are not even defined.
       There are also some other options that are not defined by POSIX.
       These have been added at the request of users who want to make use of
       certain PCRE-specific features via the POSIX calling interface.
       When PCRE is called via these functions, it is only the API that is
       POSIX-like in style. The syntax and semantics of the regular
       expressions themselves are still those of Perl, subject to the
       setting of various PCRE options, as described below. "POSIX-like in
       style" means that the API approximates to the POSIX definition; it is
       not fully POSIX-compatible, and in multi-byte encoding domains it is
       probably even less compatible.
       The header for these functions is supplied as pcreposix.h to avoid
       any potential clash with other POSIX libraries. It can, of course, be
       renamed or aliased as regex.h, which is the "correct" name. It
       provides two structure types, regex_t for compiled internal forms,
       and regmatch_t for returning captured substrings. It also defines
       some constants whose names start with "REG_"; these are used for
       setting options and identifying error codes.
