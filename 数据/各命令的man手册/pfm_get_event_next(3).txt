
       Events are uniquely identified with opaque integer identifiers.
       There is no guaranteed order within identifiers. Thus, to list all
       the events, it is necessary to use iterators.
       Events are grouped in tables within the library. A table usually
       corresponds to a PMU model or family. The library contains support
       for multiple PMU models, thus it has multiple tables. Based on the
       host hardware and software environments, tables get activated when
       the library is initialized via pfm_initialize(). Events from
       activated tables are called active events. Events from non-activated
       tables are called supported events.
       Event identifiers are usually retrieved via pfm_find_event() or when
       encoding events.
       To iterate over a list of events for a given PMU model, all that is
       needed is an initial identifier for the PMU. The first event
       identifier is usually obtained via pfm_get_pmu_info().
       The pfm_get_event_next() function returns the identifier of next
       supported event after the one passed in idx. This iterator stops when
       the last event for the PMU is passed as argument, in which case the
       function returns -1.
       void list_pmu_events(pfm_pmu_t pmu)
       {
          struct pfm_event_info info;
          struct pfm_pmu_info pinfo;
          int i, ret;
          memset(&info, 0, sizeof(info));
          memset(&pinfo, 0, sizeof(pinfo));
          info.size = sizeof(info);
          pinfo.size = sizeof(pinfo);
          ret = pfm_get_pmu_info(pmu, &pinfo);
          if (ret != PFM_SUCCESS)
             errx(1, "cannot get pmu info");
          for (i = pinfo.first_event; i != -1; i = pfm_get_event_next(i)) {
             ret = pfm_get_event_info(i, &info);
             if (ret != PFM_SUCCESS)
               errx(1, "cannot get event info");
               printf("%s Event: %s::%s\n",
                      pinfo.present ? "Active" : "Supported",
                      pinfo.name, info.name);
         }
       }
