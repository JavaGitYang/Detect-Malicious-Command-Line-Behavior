
       The Babeltrace filter.lttng-utils.debug-info component class,
       provided by the the babeltrace-plugin-lttng-utils(7) plugin, once
       instantiated, receives events from LTTng (see <http://lttng.org/>)
       traces and creates new ones which are copies of the original ones
       with extra debugging information when it’s available and possible.
       A filter.lttng-utils.debug-info component uses the LTTng state dump
       events as well as the event context’s ip (instruction pointer) field
       to locate and read the corresponding debugging information. The
       component can find the extra debugging information in an executable
       file or in a directory containing debugging information created by
       the compiler.
       The new events contain the exact same fields as the original ones
       and, when possible, a new event context’s structure field (besides
       the ip field) named debug_info by default. This structure field
       contains the following fields:
       bin (string field)
           Executable path or name followed by @ADDR or +ADDR, where ADDR is
           the address where it was loaded while being traced.  @ADDR means
           ADDR is an absolute address, and +ADDR means ADDR is a relative
           address.
           Example: my-program@0x401040.
       func (string field)
           Function name followed by +OFFSET, where OFFSET is the offset
           from the beginning of the function symbol in the executable file.
           Example: load_user_config+0x194.
       src (string field)
           Source file path or name followed by :LINE, where LINE is the
           line number in this source file at which the event occured.
           Example: user-config.c:1025.
       Any of those the previous fields can be an empty string if the
       debugging information was not available for the analyzed original
       LTTng event.
       When a filter component creates a new event with debugging
       information, it discards the original event. If the component
       receives a non-LTTng event, the component moves the event to its
       output port without alteration.
   Compile an executable for debugging information analysis
       With GCC or Clang, you should compile the program or library source
       files in debug mode with the -g option. This option makes the
       compiler generate debugging information in the operating system’s
       native format. This format is recognized by a filter.lttng-
       utils.debug-info component: it can translate the instruction pointer
       field of an event’s context to a source file and line number, along
       with the name of the surrounding function.
           Note
           This component class only supports the debugging information in
           DWARF format, version 2 or later. Use the -gdwarf or -gdwarf-
           VERSION (where VERSION is the DWARF version) compiler options to
           explicitly generate DWARF debugging information.
       If you don’t compile the executable’s source files with the -g option
       or with an equivalent option, no DWARF information is available: the
       component uses ELF symbols from the executable file instead. In this
       case, the events that the component creates do not contain the source
       file and line number (src field), but only the name of the nearest
       function symbol with an offset in bytes to the location in the
       executable from which the LTTng event occured (func field).
       If the executable file has neither ELF symbols nor DWARF information,
       the filter.lttng-utils.debug-info component cannot map the event to
       its source location: it emits the original LTTng event which has no
       special debug_info context field.
   LTTng prerequisites
       A filter.lttng-utils.debug-info component can only analyze user space
       events generated by LTTng (see <http://lttng.org>) 2.8.0 or later.
       To get debugging information for LTTng-UST events which occur in
       executables and libraries which the system’s loader loads (what you
       can see with ldd(1)):
        1. Add the ip and vpid context fields to user space event records:
               $ lttng add-context --userspace --type=ip --type=vpid
           See lttng-add-context(1) for more details.
        2. Enable the LTTng-UST state dump events:
               $ lttng enable-event --userspace 'lttng_ust_statedump:*'
           See lttng-enable-event(1) and lttng-ust(3) for more details.
       To get debugging information for LTTng-UST events which occur in
       dynamically loaded objects, for example plugins:
        1. Do the previous steps (add context fields and enable the
           LTTng-UST state dump events).
        2. Enable the LTTng-UST dynamic linker tracing helper events:
               $ lttng enable-event --userspace 'lttng_ust_dl:*'
           See lttng-ust-dl(3) for more details.
        3. When you are ready to trace, start your application with the
           LD_PRELOAD environment variable set to liblttng-ust-dl.so:
               $ LD_PRELOAD=liblttng-ust-dl.so my-app
   Separate debugging information
       It is possible to store DWARF debugging information outside the
       executable itself, whether it is to reduce the executable’s file
       size, or simply to facilitate the sharing of the debugging
       information.
       This is usually achieved via one of two mechanisms, namely build ID
       and debug link. Their use and operation is described in the Debugging
       Information in Separate Files (see
       <https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-
       Files.html>) section of GDB’s documentation.
       A filter.lttng-utils.debug-info component can find separate debugging
       information files automatically, as long as they meet the
       requirements stated in this man page.
       The debugging information lookup order is the same as GDB’s, namely:
        1. Within the executable file itself.
        2. Through the build ID method in the /usr/lib/debug/.build-id
           directory.
        3. In the various possible debug link locations.
       The component uses the first debugging information file that it
       finds.
       You can use the deubg-info-dir initialization parameter to override
       the default /usr/lib/debug directory used in the build ID and debug
       link methods.
           Note
           It is currently not possible to make this component search for
           debugging information in multiple directories.
   Target prefix
       The debugging information analysis that a filter.lttng-utils.debug-
       info component performs uses the paths to the executables as
       collected during tracing as the default mechanism to resolve DWARF
       and ELF information.
       If the trace was recorded on a separate machine, however, you can use
       the target-prefix parameter to specify a prefix directory, that is,
       the root of the target file system.
       For example, if an instrumented executable’s path is /usr/bin/foo on
       the target system, you can place this file at
       /home/user/target/usr/bin/foo on the system on which you use the
       component. In this case, the target prefix to use is
       /home/user/target.
