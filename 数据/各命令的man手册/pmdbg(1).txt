
       The components of the Performance Co-Pilot (PCP) use a global
       mechanism to control diagnostic and debug output.  Historically this
       was a vector of bit-fields but this was later replaced by an array of
       debug options.  All of the bit-field debug controls have an
       equivalent in the new scheme, but some new debug options cannot be
       represented in the old bit-field scheme.
       pmdbg with a -l argument prints out all the debug options.  Without
       the -o argument the output lists the name of each option and some
       descriptive text.  Otherwise the output is for only the old bit-
       fields with the mnemonic and decimal values of each the bit-field
       along with some descriptive text.
       pmdbg with a -D argument parses the list of names(s) using
       __pmParseDebug(3) and reports the corresponding decimal value.  This
       use is not required in the new scheme, but for the old bit-fields
       scheme it was useful when debugging and wanting to set the internal
       value of the control vector (pmDebug) via a debugger, e.g.  gdb(1).
       For the new scheme, the same effect can be achieved using the name of
       the option(s) and calling pmSetDebug(3) from within the debugger.
       The alternative usage also relates to the old bit-field scheme and
       the code arguments are values for the debug vector, and the bit-
       fields that are enabled by each of these values is listed.
       Each code may be an integer, a hexadecimal value or a hexadecimal
       value prefixed by either ``0x'' or ``0X''.
       Most applications using the facilities of the PCP support a -D
       name[,name ...]  command-line syntax to enable debug control using
       the name(s) of the desired debug options.
       Alternatively the initial value of the debug control flags may be set
       to either a value N (old scheme) or a comma-separated list if option
       name(s) (new scheme) using the environment variable $PCP_DEBUG.  If
       both mechanisms are used the effect is additive, so the resultant
       flags are those set via $PCP_DEBUG combined with those set via any -D
       command line options.
