
   dlopen()
       The function dlopen() loads the dynamic shared object (shared
       library) file named by the null-terminated string filename and
       returns an opaque "handle" for the loaded object.  This handle is
       employed with other functions in the dlopen API, such as dlsym(3),
       dladdr(3), dlinfo(3), and dlclose().
       If filename is NULL, then the returned handle is for the main
       program.  If filename contains a slash ("/"), then it is interpreted
       as a (relative or absolute) pathname.  Otherwise, the dynamic linker
       searches for the object as follows (see ld.so(8) for further
       details):
       o   (ELF only) If the executable file for the calling program
           contains a DT_RPATH tag, and does not contain a DT_RUNPATH tag,
           then the directories listed in the DT_RPATH tag are searched.
       o   If, at the time that the program was started, the environment
           variable LD_LIBRARY_PATH was defined to contain a colon-separated
           list of directories, then these are searched.  (As a security
           measure, this variable is ignored for set-user-ID and set-group-
           ID programs.)
       o   (ELF only) If the executable file for the calling program
           contains a DT_RUNPATH tag, then the directories listed in that
           tag are searched.
       o   The cache file /etc/ld.so.cache (maintained by ldconfig(8)) is
           checked to see whether it contains an entry for filename.
       o   The directories /lib and /usr/lib are searched (in that order).
       If the object specified by filename has dependencies on other shared
       objects, then these are also automatically loaded by the dynamic
       linker using the same rules.  (This process may occur recursively, if
       those objects in turn have dependencies, and so on.)
       One of the following two values must be included in flags:
       RTLD_LAZY
              Perform lazy binding.  Resolve symbols only as the code that
              references them is executed.  If the symbol is never
              referenced, then it is never resolved.  (Lazy binding is
              performed only for function references; references to
              variables are always immediately bound when the shared object
              is loaded.)  Since glibc 2.1.1, this flag is overridden by the
              effect of the LD_BIND_NOW environment variable.
       RTLD_NOW
              If this value is specified, or the environment variable
              LD_BIND_NOW is set to a nonempty string, all undefined symbols
              in the shared object are resolved before dlopen() returns.  If
              this cannot be done, an error is returned.
       Zero or more of the following values may also be ORed in flags:
       RTLD_GLOBAL
              The symbols defined by this shared object will be made
              available for symbol resolution of subsequently loaded shared
              objects.
       RTLD_LOCAL
              This is the converse of RTLD_GLOBAL, and the default if
              neither flag is specified.  Symbols defined in this shared
              object are not made available to resolve references in
              subsequently loaded shared objects.
       RTLD_NODELETE (since glibc 2.2)
              Do not unload the shared object during dlclose().
              Consequently, the object's static variables are not
              reinitialized if the object is reloaded with dlopen() at a
              later time.
       RTLD_NOLOAD (since glibc 2.2)
              Don't load the shared object.  This can be used to test if the
              object is already resident (dlopen() returns NULL if it is
              not, or the object's handle if it is resident).  This flag can
              also be used to promote the flags on a shared object that is
              already loaded.  For example, a shared object that was
              previously loaded with RTLD_LOCAL can be reopened with
              RTLD_NOLOAD | RTLD_GLOBAL.
       RTLD_DEEPBIND (since glibc 2.3.4)
              Place the lookup scope of the symbols in this shared object
              ahead of the global scope.  This means that a self-contained
              object will use its own symbols in preference to global
              symbols with the same name contained in objects that have
              already been loaded.
       If filename is NULL, then the returned handle is for the main
       program.  When given to dlsym(), this handle causes a search for a
       symbol in the main program, followed by all shared objects loaded at
       program startup, and then all shared objects loaded by dlopen() with
       the flag RTLD_GLOBAL.
       External references in the shared object are resolved using the
       shared objects in that object's dependency list and any other objects
       previously opened with the RTLD_GLOBAL flag.  If the executable was
       linked with the flag "-rdynamic" (or, synonymously,
       "--export-dynamic"), then the global symbols in the executable will
       also be used to resolve references in a dynamically loaded shared
       object.
       If the same shared object is loaded again with dlopen(), the same
       object handle is returned.  The dynamic linker maintains reference
       counts for object handles, so a dynamically loaded shared object is
       not deallocated until dlclose() has been called on it as many times
       as dlopen() has succeeded on it.  Any initialization returns (see
       below) are called just once.  However, a subsequent dlopen() call
       that loads the same shared object with RTLD_NOW may force symbol
       resolution for a shared object earlier loaded with RTLD_LAZY.
       If dlopen() fails for any reason, it returns NULL.
   dlmopen()
       This function performs the same task as dlopen()â€”the filename and
       flags arguments, as well as the return value, are the same, except
       for the differences noted below.
       The dlmopen() function differs from dlopen() primarily in that it
       accepts an additional argument, lmid, that specifies the link-map
       list (also referred to as a namespace) in which the shared object
       should be loaded.  (By comparison, dlopen() adds the dynamically
       loaded shared object to the same namespace as the shared object from
       which the dlopen() call is made.)  The Lmid_t type is an opaque
       handle that refers to a namespace.
       The lmid argument is either the ID of an existing namespace (which
       can be obtained using the dlinfo(3) RTLD_DI_LMID request) or one of
       the following special values:
       LM_ID_BASE
              Load the shared object in the initial namespace (i.e., the
              application's namespace).
       LM_ID_NEWLM
              Create a new namespace and load the shared object in that
              namespace.  The object must have been correctly linked to
              reference all of the other shared objects that it requires,
              since the new namespace is initially empty.
       If filename is NULL, then the only permitted value for lmid is
       LM_ID_BASE.
   dlclose()
       The function dlclose() decrements the reference count on the
       dynamically loaded shared object referred to by handle.  If the
       reference count drops to zero, then the object is unloaded.  All
       shared objects that were automatically loaded when dlopen() was
       invoked on the object referred to by handle are recursively closed in
       the same manner.
       A successful return from dlclose() does not guarantee that the
       symbols associated with handle are removed from the caller's address
       space.  In addition to references resulting from explicit dlopen()
       calls, a shared object may have been implicitly loaded (and reference
       counted) because of dependencies in other shared objects.  Only when
       all references have been released can the shared object be removed
       from the address space.
