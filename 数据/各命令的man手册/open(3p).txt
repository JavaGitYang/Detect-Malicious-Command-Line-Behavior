
       The open() function shall establish the connection between a file and
       a file descriptor. It shall create an open file description that
       refers to a file and a file descriptor that refers to that open file
       description.  The file descriptor is used by other I/O functions to
       refer to that file. The path argument points to a pathname naming the
       file.
       The open() function shall return a file descriptor for the named file
       that is the lowest file descriptor not currently open for that
       process. The open file description is new, and therefore the file
       descriptor shall not share it with any other process in the system.
       The FD_CLOEXEC file descriptor flag associated with the new file
       descriptor shall be cleared unless the O_CLOEXEC flag is set in
       oflag.
       The file offset used to mark the current position within the file
       shall be set to the beginning of the file.
       The file status flags and file access modes of the open file
       description shall be set according to the value of oflag.
       Values for oflag are constructed by a bitwise-inclusive OR of flags
       from the following list, defined in <fcntl.h>.  Applications shall
       specify exactly one of the first five values (file access modes)
       below in the value of oflag:
       O_EXEC        Open for execute only (non-directory files). The result
                     is unspecified if this flag is applied to a directory.
       O_RDONLY      Open for reading only.
       O_RDWR        Open for reading and writing. The result is undefined
                     if this flag is applied to a FIFO.
       O_SEARCH      Open directory for search only. The result is
                     unspecified if this flag is applied to a non-directory
                     file.
       O_WRONLY      Open for writing only.
       Any combination of the following may be used:
       O_APPEND      If set, the file offset shall be set to the end of the
                     file prior to each write.
       O_CLOEXEC     If set, the FD_CLOEXEC flag for the new file descriptor
                     shall be set.
       O_CREAT       If the file exists, this flag has no effect except as
                     noted under O_EXCL below. Otherwise, the file shall be
                     created; the user ID of the file shall be set to the
                     effective user ID of the process; the group ID of the
                     file shall be set to the group ID of the file's parent
                     directory or to the effective group ID of the process;
                     and the access permission bits (see <sys/stat.h>) of
                     the file mode shall be set to the value of the argument
                     following the oflag argument taken as type mode_t
                     modified as follows: a bitwise AND is performed on the
                     file-mode bits and the corresponding bits in the
                     complement of the process' file mode creation mask.
                     Thus, all bits in the file mode whose corresponding bit
                     in the file mode creation mask is set are cleared. When
                     bits other than the file permission bits are set, the
                     effect is unspecified. The argument following the oflag
                     argument does not affect whether the file is open for
                     reading, writing, or for both. Implementations shall
                     provide a way to initialize the file's group ID to the
                     group ID of the parent directory. Implementations may,
                     but need not, provide an implementation-defined way to
                     initialize the file's group ID to the effective group
                     ID of the calling process.
       O_DIRECTORY   If path resolves to a non-directory file, fail and set
                     errno to [ENOTDIR].
       O_DSYNC       Write I/O operations on the file descriptor shall
                     complete as defined by synchronized I/O data integrity
                     completion.
       O_EXCL        If O_CREAT and O_EXCL are set, open() shall fail if the
                     file exists. The check for the existence of the file
                     and the creation of the file if it does not exist shall
                     be atomic with respect to other threads executing
                     open() naming the same filename in the same directory
                     with O_EXCL and O_CREAT set. If O_EXCL and O_CREAT are
                     set, and path names a symbolic link, open() shall fail
                     and set errno to [EEXIST], regardless of the contents
                     of the symbolic link. If O_EXCL is set and O_CREAT is
                     not set, the result is undefined.
       O_NOCTTY      If set and path identifies a terminal device, open()
                     shall not cause the terminal device to become the
                     controlling terminal for the process. If path does not
                     identify a terminal device, O_NOCTTY shall be ignored.
       O_NOFOLLOW    If path names a symbolic link, fail and set errno to
                     [ELOOP].
       O_NONBLOCK    When opening a FIFO with O_RDONLY or O_WRONLY set:
                      *  If O_NONBLOCK is set, an open() for reading-only
                         shall return without delay. An open() for writing-
                         only shall return an error if no process currently
                         has the file open for reading.
                      *  If O_NONBLOCK is clear, an open() for reading-only
                         shall block the calling thread until a thread opens
                         the file for writing. An open() for writing-only
                         shall block the calling thread until a thread opens
                         the file for reading.
                     When opening a block special or character special file
                     that supports non-blocking opens:
                      *  If O_NONBLOCK is set, the open() function shall
                         return without blocking for the device to be ready
                         or available. Subsequent behavior of the device is
                         device-specific.
                      *  If O_NONBLOCK is clear, the open() function shall
                         block the calling thread until the device is ready
                         or available before returning.
                     Otherwise, the O_NONBLOCK flag shall not cause an
                     error, but it is unspecified whether the file status
                     flags will include the O_NONBLOCK flag.
       O_RSYNC       Read I/O operations on the file descriptor shall
                     complete at the same level of integrity as specified by
                     the O_DSYNC and O_SYNC flags. If both O_DSYNC and
                     O_RSYNC are set in oflag, all I/O operations on the
                     file descriptor shall complete as defined by
                     synchronized I/O data integrity completion. If both
                     O_SYNC and O_RSYNC are set in flags, all I/O operations
                     on the file descriptor shall complete as defined by
                     synchronized I/O file integrity completion.
       O_SYNC        Write I/O operations on the file descriptor shall
                     complete as defined by synchronized I/O file integrity
                     completion.
                     The O_SYNC flag shall be supported for regular files,
                     even if the Synchronized Input and Output option is not
                     supported.
       O_TRUNC       If the file exists and is a regular file, and the file
                     is successfully opened O_RDWR or O_WRONLY, its length
                     shall be truncated to 0, and the mode and owner shall
                     be unchanged. It shall have no effect on FIFO special
                     files or terminal device files. Its effect on other
                     file types is implementation-defined. The result of
                     using O_TRUNC without either O_RDWR or O_WRONLY is
                     undefined.
       O_TTY_INIT    If path identifies a terminal device other than a
                     pseudo-terminal, the device is not already open in any
                     process, and either O_TTY_INIT is set in oflag or
                     O_TTY_INIT has the value zero, open() shall set any
                     non-standard termios structure terminal parameters to a
                     state that provides conforming behavior; see the Base
                     Definitions volume of POSIX.1‚Äê2008, Section 11.2,
                     Parameters that Can be Set.  It is unspecified whether
                     O_TTY_INIT has any effect if the device is already open
                     in any process. If path identifies the slave side of a
                     pseudo-terminal that is not already open in any
                     process, open() shall set any non-standard termios
                     structure terminal parameters to a state that provides
                     conforming behavior, regardless of whether O_TTY_INIT
                     is set. If path does not identify a terminal device,
                     O_TTY_INIT shall be ignored.
       If O_CREAT is set and the file did not previously exist, upon
       successful completion, open() shall mark for update the last data
       access, last data modification, and last file status change
       timestamps of the file and the last data modification and last file
       status change timestamps of the parent directory.
       If O_TRUNC is set and the file did previously exist, upon successful
       completion, open() shall mark for update the last data modification
       and last file status change timestamps of the file.
       If both the O_SYNC and O_DSYNC flags are set, the effect is as if
       only the O_SYNC flag was set.
       If path refers to a STREAMS file, oflag may be constructed from
       O_NONBLOCK OR'ed with either O_RDONLY, O_WRONLY, or O_RDWR. Other
       flag values are not applicable to STREAMS devices and shall have no
       effect on them. The value O_NONBLOCK affects the operation of STREAMS
       drivers and certain functions applied to file descriptors associated
       with STREAMS files. For STREAMS drivers, the implementation of
       O_NONBLOCK is device-specific.
       The application shall ensure that it specifies the O_TTY_INIT flag on
       the first open of a terminal device since system boot or since the
       device was closed by the process that last had it open. The
       application need not specify the O_TTY_INIT flag when opening pseudo-
       terminals.  If path names the master side of a pseudo-terminal
       device, then it is unspecified whether open() locks the slave side so
       that it cannot be opened. Conforming applications shall call
       unlockpt() before opening the slave side.
       The largest value that can be represented correctly in an object of
       type off_t shall be established as the offset maximum in the open
       file description.
       The openat() function shall be equivalent to the open() function
       except in the case where path specifies a relative path. In this case
       the file to be opened is determined relative to the directory
       associated with the file descriptor fd instead of the current working
       directory. If the file descriptor was opened without O_SEARCH, the
       function shall check whether directory searches are permitted using
       the current permissions of the directory underlying the file
       descriptor. If the file descriptor was opened with O_SEARCH, the
       function shall not perform the check.
       The oflag parameter and the optional fourth parameter correspond
       exactly to the parameters of open().
       If openat() is passed the special value AT_FDCWD in the fd parameter,
       the current working directory shall be used and the behavior shall be
       identical to a call to open().
