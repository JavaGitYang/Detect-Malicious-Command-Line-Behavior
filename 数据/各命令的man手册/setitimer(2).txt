
       These system calls provide access to interval timers, that is, timers
       that initially expire at some point in the future, and (optionally)
       at regular intervals after that.  When a timer expires, a signal is
       generated for the calling process, and the timer is reset to the
       specified interval (if the interval is nonzero).
       Three types of timers—specified via the which argument—are provided,
       each of which counts against a different clock and generates a
       different signal on timer expiration:
       ITIMER_REAL    This timer counts down in real (i.e., wall clock)
                      time.  At each expiration, a SIGALRM signal is
                      generated.
       ITIMER_VIRTUAL This timer counts down against the user-mode CPU time
                      consumed by the process.  (The measurement includes
                      CPU time consumed by all threads in the process.)  At
                      each expiration, a SIGVTALRM signal is generated.
       ITIMER_PROF    This timer counts down against the total (i.e., both
                      user and system) CPU time consumed by the process.
                      (The measurement includes CPU time consumed by all
                      threads in the process.)  At each expiration, a
                      SIGPROF signal is generated.
                      In conjunction with ITIMER_VIRTUAL, this timer can be
                      used to profile user and system CPU time consumed by
                      the process.
       A process has only one of each of the three types of timers.
       Timer values are defined by the following structures:
           struct itimerval {
               struct timeval it_interval; /* Interval for periodic timer */
               struct timeval it_value;    /* Time until next expiration */
           };
           struct timeval {
               time_t      tv_sec;         /* seconds */
               suseconds_t tv_usec;        /* microseconds */
           };
   getitimer()
       The function getitimer() places the current value of the timer speci‐
       fied by which in the buffer pointed to by curr_value.
       The it_value substructure is populated with the amount of time
       remaining until the next expiration of the specified timer.  This
       value changes as the timer counts down, and will be reset to
       it_interval when the timer expires.  If both fields of it_value are
       zero, then this timer is currently disarmed (inactive).
       The it_interval substructure is populated with the timer interval.
       If both fields of it_interval are zero, then this is a single-shot
       timer (i.e., it expires just once).
   setitimer()
       The function setitimer() arms or disarms the timer specified by
       which, by setting the timer to the value specified by new_value.  If
       old_value is non-NULL, the buffer it points to is used to return the
       previous value of the timer (i.e., the same information that is
       returned by getitimer()).
       If either field in new_value.it_value is nonzero, then the timer is
       armed to initially expire at the specified time.  If both fields in
       new_value.it_value are zero, then the timer is disarmed.
       The new_value.it_interval field specifies the new interval for the
       timer; if both of its subfields are zero, the timer is single-shot.
