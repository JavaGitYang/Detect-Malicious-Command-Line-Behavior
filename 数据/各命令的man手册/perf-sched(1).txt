
       There are several variants of perf sched:
           'perf sched record <command>' to record the scheduling events
           of an arbitrary workload.
           'perf sched latency' to report the per task scheduling latencies
           and other scheduling properties of the workload.
           'perf sched script' to see a detailed trace of the workload that
            was recorded (aliased to 'perf script' for now).
           'perf sched replay' to simulate the workload that was recorded
           via perf sched record. (this is done by starting up mockup threads
           that mimic the workload based on the events in the trace. These
           threads can then replay the timings (CPU runtime and sleep patterns)
           of the workload as it occurred when it was recorded - and can repeat
           it a number of times, measuring its performance.)
           'perf sched map' to print a textual context-switching outline of
           workload captured via perf sched record.  Columns stand for
           individual CPUs, and the two-letter shortcuts stand for tasks that
           are running on a CPU. A '*' denotes the CPU that had the event, and
           a dot signals an idle CPU.
           'perf sched timehist' provides an analysis of scheduling events.
           Example usage:
               perf sched record -- sleep 1
               perf sched timehist
           By default it shows the individual schedule events, including the wait
           time (time between sched-out and next sched-in events for the task), the
           task scheduling delay (time between wakeup and actually running) and run
           time for the task:
                       time    cpu  task name             wait time  sch delay   run time
                                    [tid/pid]                (msec)     (msec)     (msec)
             -------------- ------  --------------------  ---------  ---------  ---------
               79371.874569 [0011]  gcc[31949]                0.014      0.000      1.148
               79371.874591 [0010]  gcc[31951]                0.000      0.000      0.024
               79371.874603 [0010]  migration/10[59]          3.350      0.004      0.011
               79371.874604 [0011]  <idle>                    1.148      0.000      0.035
               79371.874723 [0005]  <idle>                    0.016      0.000      1.383
               79371.874746 [0005]  gcc[31949]                0.153      0.078      0.022
           ...
           Times are in msec.usec.
