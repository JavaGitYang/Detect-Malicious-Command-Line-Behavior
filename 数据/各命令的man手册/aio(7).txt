
       The POSIX asynchronous I/O (AIO) interface allows applications to
       initiate one or more I/O operations that are performed asynchronously
       (i.e., in the background).  The application can elect to be notified
       of completion of the I/O operation in a variety of ways: by delivery
       of a signal, by instantiation of a thread, or no notification at all.
       The POSIX AIO interface consists of the following functions:
       aio_read(3)     Enqueue a read request.  This is the asynchronous
                       analog of read(2).
       aio_write(3)    Enqueue a write request.  This is the asynchronous
                       analog of write(2).
       aio_fsync(3)    Enqueue a sync request for the I/O operations on a
                       file descriptor.  This is the asynchronous analog of
                       fsync(2) and fdatasync(2).
       aio_error(3)    Obtain the error status of an enqueued I/O request.
       aio_return(3)   Obtain the return status of a completed I/O request.
       aio_suspend(3)  Suspend the caller until one or more of a specified
                       set of I/O requests completes.
       aio_cancel(3)   Attempt to cancel outstanding I/O requests on a
                       specified file descriptor.
       lio_listio(3)   Enqueue multiple I/O requests using a single function
                       call.
       The aiocb ("asynchronous I/O control block") structure defines
       parameters that control an I/O operation.  An argument of this type
       is employed with all of the functions listed above.  This structure
       has the following form:
           #include <aiocb.h>
           struct aiocb {
               /* The order of these fields is implementation-dependent */
               int             aio_fildes;     /* File descriptor */
               off_t           aio_offset;     /* File offset */
               volatile void  *aio_buf;        /* Location of buffer */
               size_t          aio_nbytes;     /* Length of transfer */
               int             aio_reqprio;    /* Request priority */
               struct sigevent aio_sigevent;   /* Notification method */
               int             aio_lio_opcode; /* Operation to be performed;
                                                  lio_listio() only */
               /* Various implementation-internal fields not shown */
           };
           /* Operation codes for 'aio_lio_opcode': */
           enum { LIO_READ, LIO_WRITE, LIO_NOP };
       The fields of this structure are as follows:
       aio_fildes      The file descriptor on which the I/O operation is to
                       be performed.
       aio_offset      This is the file offset at which the I/O operation is
                       to be performed.
       aio_buf         This is the buffer used to transfer data for a read
                       or write operation.
       aio_nbytes      This is the size of the buffer pointed to by aio_buf.
       aio_reqprio     This field specifies a value that is subtracted from
                       the calling thread's real-time priority in order to
                       determine the priority for execution of this I/O
                       request (see pthread_setschedparam(3)).  The speci‐
                       fied value must be between 0 and the value returned
                       by sysconf(_SC_AIO_PRIO_DELTA_MAX).  This field is
                       ignored for file synchronization operations.
       aio_sigevent    This field is a structure that specifies how the
                       caller is to be notified when the asynchronous I/O
                       operation completes.  Possible values for
                       aio_sigevent.sigev_notify are SIGEV_NONE, SIGEV_SIG‐
                       NAL, and SIGEV_THREAD.  See sigevent(7) for further
                       details.
       aio_lio_opcode  The type of operation to be performed; used only for
                       lio_listio(3).
       In addition to the standard functions listed above, the GNU C library
       provides the following extension to the POSIX AIO API:
       aio_init(3)     Set parameters for tuning the behavior of the glibc
                       POSIX AIO implementation.
