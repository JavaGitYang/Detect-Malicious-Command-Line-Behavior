
       Given node and service, which identify an Internet host and a
       service, getaddrinfo() returns one or more addrinfo structures, each
       of which contains an Internet address that can be specified in a call
       to bind(2) or connect(2).  The getaddrinfo() function combines the
       functionality provided by the gethostbyname(3) and getservbyname(3)
       functions into a single interface, but unlike the latter functions,
       getaddrinfo() is reentrant and allows programs to eliminate
       IPv4-versus-IPv6 dependencies.
       The addrinfo structure used by getaddrinfo() contains the following
       fields:
           struct addrinfo {
               int              ai_flags;
               int              ai_family;
               int              ai_socktype;
               int              ai_protocol;
               socklen_t        ai_addrlen;
               struct sockaddr *ai_addr;
               char            *ai_canonname;
               struct addrinfo *ai_next;
           };
       The hints argument points to an addrinfo structure that specifies
       criteria for selecting the socket address structures returned in the
       list pointed to by res.  If hints is not NULL it points to an
       addrinfo structure whose ai_family, ai_socktype, and ai_protocol
       specify criteria that limit the set of socket addresses returned by
       getaddrinfo(), as follows:
       ai_family   This field specifies the desired address family for the
                   returned addresses.  Valid values for this field include
                   AF_INET and AF_INET6.  The value AF_UNSPEC indicates that
                   getaddrinfo() should return socket addresses for any
                   address family (either IPv4 or IPv6, for example) that
                   can be used with node and service.
       ai_socktype This field specifies the preferred socket type, for exam‐
                   ple SOCK_STREAM or SOCK_DGRAM.  Specifying 0 in this
                   field indicates that socket addresses of any type can be
                   returned by getaddrinfo().
       ai_protocol This field specifies the protocol for the returned socket
                   addresses.  Specifying 0 in this field indicates that
                   socket addresses with any protocol can be returned by
                   getaddrinfo().
       ai_flags    This field specifies additional options, described below.
                   Multiple flags are specified by bitwise OR-ing them
                   together.
       All the other fields in the structure pointed to by hints must con‐
       tain either 0 or a null pointer, as appropriate.
       Specifying hints as NULL is equivalent to setting ai_socktype and
       ai_protocol to 0; ai_family to AF_UNSPEC; and ai_flags to
       (AI_V4MAPPED | AI_ADDRCONFIG).  (POSIX specifies different defaults
       for ai_flags; see NOTES.)  node specifies either a numerical network
       address (for IPv4, numbers-and-dots notation as supported by
       inet_aton(3); for IPv6, hexadecimal string format as supported by
       inet_pton(3)), or a network hostname, whose network addresses are
       looked up and resolved.  If hints.ai_flags contains the AI_NUMERI‐
       CHOST flag, then node must be a numerical network address.  The
       AI_NUMERICHOST flag suppresses any potentially lengthy network host
       address lookups.
       If the AI_PASSIVE flag is specified in hints.ai_flags, and node is
       NULL, then the returned socket addresses will be suitable for
       bind(2)ing a socket that will accept(2) connections.  The returned
       socket address will contain the "wildcard address" (INADDR_ANY for
       IPv4 addresses, IN6ADDR_ANY_INIT for IPv6 address).  The wildcard
       address is used by applications (typically servers) that intend to
       accept connections on any of the host's network addresses.  If node
       is not NULL, then the AI_PASSIVE flag is ignored.
       If the AI_PASSIVE flag is not set in hints.ai_flags, then the
       returned socket addresses will be suitable for use with connect(2),
       sendto(2), or sendmsg(2).  If node is NULL, then the network address
       will be set to the loopback interface address (INADDR_LOOPBACK for
       IPv4 addresses, IN6ADDR_LOOPBACK_INIT for IPv6 address); this is used
       by applications that intend to communicate with peers running on the
       same host.
       service sets the port in each returned address structure.  If this
       argument is a service name (see services(5)), it is translated to the
       corresponding port number.  This argument can also be specified as a
       decimal number, which is simply converted to binary.  If service is
       NULL, then the port number of the returned socket addresses will be
       left uninitialized.  If AI_NUMERICSERV is specified in hints.ai_flags
       and service is not NULL, then service must point to a string contain‐
       ing a numeric port number.  This flag is used to inhibit the invoca‐
       tion of a name resolution service in cases where it is known not to
       be required.
       Either node or service, but not both, may be NULL.
       The getaddrinfo() function allocates and initializes a linked list of
       addrinfo structures, one for each network address that matches node
       and service, subject to any restrictions imposed by hints, and
       returns a pointer to the start of the list in res.  The items in the
       linked list are linked by the ai_next field.
       There are several reasons why the linked list may have more than one
       addrinfo structure, including: the network host is multihomed, acces‐
       sible over multiple protocols (e.g., both AF_INET and AF_INET6); or
       the same service is available from multiple socket types (one
       SOCK_STREAM address and another SOCK_DGRAM address, for example).
       Normally, the application should try using the addresses in the order
       in which they are returned.  The sorting function used within getad‐
       drinfo() is defined in RFC 3484; the order can be tweaked for a par‐
       ticular system by editing /etc/gai.conf (available since glibc 2.5).
       If hints.ai_flags includes the AI_CANONNAME flag, then the ai_canon‐
       name field of the first of the addrinfo structures in the returned
       list is set to point to the official name of the host.
       The remaining fields of each returned addrinfo structure are initial‐
       ized as follows:
       * The ai_family, ai_socktype, and ai_protocol fields return the
         socket creation parameters (i.e., these fields have the same mean‐
         ing as the corresponding arguments of socket(2)).  For example,
         ai_family might return AF_INET or AF_INET6; ai_socktype might
         return SOCK_DGRAM or SOCK_STREAM; and ai_protocol returns the pro‐
         tocol for the socket.
       * A pointer to the socket address is placed in the ai_addr field, and
         the length of the socket address, in bytes, is placed in the
         ai_addrlen field.
       If hints.ai_flags includes the AI_ADDRCONFIG flag, then IPv4
       addresses are returned in the list pointed to by res only if the
       local system has at least one IPv4 address configured, and IPv6
       addresses are returned only if the local system has at least one IPv6
       address configured.  The loopback address is not considered for this
       case as valid as a configured address.  This flag is useful on, for
       example, IPv4-only systems, to ensure that getaddrinfo() does not
       return IPv6 socket addresses that would always fail in connect(2) or
       bind(2).
       If hints.ai_flags specifies the AI_V4MAPPED flag, and hints.ai_family
       was specified as AF_INET6, and no matching IPv6 addresses could be
       found, then return IPv4-mapped IPv6 addresses in the list pointed to
       by res.  If both AI_V4MAPPED and AI_ALL are specified in
       hints.ai_flags, then return both IPv6 and IPv4-mapped IPv6 addresses
       in the list pointed to by res.  AI_ALL is ignored if AI_V4MAPPED is
       not also specified.
       The freeaddrinfo() function frees the memory that was allocated for
       the dynamically allocated linked list res.
   Extensions to getaddrinfo() for Internationalized Domain Names
       Starting with glibc 2.3.4, getaddrinfo() has been extended to selec‐
       tively allow the incoming and outgoing hostnames to be transparently
       converted to and from the Internationalized Domain Name (IDN) format
       (see RFC 3490, Internationalizing Domain Names in Applications
       (IDNA)).  Four new flags are defined:
       AI_IDN If this flag is specified, then the node name given in node is
              converted to IDN format if necessary.  The source encoding is
              that of the current locale.
              If the input name contains non-ASCII characters, then the IDN
              encoding is used.  Those parts of the node name (delimited by
              dots) that contain non-ASCII characters are encoded using
              ASCII Compatible Encoding (ACE) before being passed to the
              name resolution functions.
       AI_CANONIDN
              After a successful name lookup, and if the AI_CANONNAME flag
              was specified, getaddrinfo() will return the canonical name of
              the node corresponding to the addrinfo structure value passed
              back.  The return value is an exact copy of the value returned
              by the name resolution function.
              If the name is encoded using ACE, then it will contain the
              xn-- prefix for one or more components of the name.  To con‐
              vert these components into a readable form the AI_CANONIDN
              flag can be passed in addition to AI_CANONNAME.  The resulting
              string is encoded using the current locale's encoding.
       AI_IDN_ALLOW_UNASSIGNED, AI_IDN_USE_STD3_ASCII_RULES
              Setting these flags will enable the IDNA_ALLOW_UNASSIGNED
              (allow unassigned Unicode code points) and
              IDNA_USE_STD3_ASCII_RULES (check output to make sure it is a
              STD3 conforming hostname) flags respectively to be used in the
              IDNA handling.
