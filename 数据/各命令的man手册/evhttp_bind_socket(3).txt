
     The event API provides a mechanism to execute a function when a spe‐
     cific event on a file descriptor occurs or after a given time has
     passed.
     The event API needs to be initialized with event_init() before it can
     be used.
     In order to process events, an application needs to call
     event_dispatch().  This function only returns on error, and should
     replace the event core of the application program.
     The function event_set() prepares the event structure ev to be used in
     future calls to event_add() and event_del().  The event will be pre‐
     pared to call the function specified by the fn argument with an int
     argument indicating the file descriptor, a short argument indicating
     the type of event, and a void * argument given in the arg argument.
     The fd indicates the file descriptor that should be monitored for
     events.  The events can be either EV_READ, EV_WRITE, or both, indicat‐
     ing that an application can read or write from the file descriptor
     respectively without blocking.
     The function fn will be called with the file descriptor that triggered
     the event and the type of event which will be either EV_TIMEOUT,
     EV_SIGNAL, EV_READ, or EV_WRITE.  Additionally, an event which has reg‐
     istered interest in more than one of the preceeding events, via bit‐
     wise-OR to event_set(), can provide its callback function with a bit‐
     wise-OR of more than one triggered event.  The additional flag
     EV_PERSIST makes an event_add() persistent until event_del() has been
     called.
     Once initialized, the ev structure can be used repeatedly with
     event_add() and event_del() and does not need to be reinitialized
     unless the function called and/or the argument to it are to be changed.
     However, when an ev structure has been added to libevent using
     event_add() the structure must persist until the event occurs (assuming
     EV_PERSIST is not set) or is removed using event_del().  You may not
     reuse the same ev structure for multiple monitored descriptors; each
     descriptor needs its own ev.
     The function event_add() schedules the execution of the ev event when
     the event specified in event_set() occurs or in at least the time spec‐
     ified in the tv.  If tv is NULL, no timeout occurs and the function
     will only be called if a matching event occurs on the file descriptor.
     The event in the ev argument must be already initialized by event_set()
     and may not be used in calls to event_set() until it has timed out or
     been removed with event_del().  If the event in the ev argument already
     has a scheduled timeout, the old timeout will be replaced by the new
     one.
     The function event_del() will cancel the event in the argument ev.  If
     the event has already executed or has never been added the call will
     have no effect.
     The functions evtimer_set(), evtimer_add(), evtimer_del(),
     evtimer_initialized(), and evtimer_pending() are abbreviations for com‐
     mon situations where only a timeout is required.  The file descriptor
     passed will be -1, and the event type will be EV_TIMEOUT.
     The functions signal_set(), signal_add(), signal_del(),
     signal_initialized(), and signal_pending() are abbreviations.  The
     event type will be a persistent EV_SIGNAL.  That means signal_set()
     adds EV_PERSIST.
     In order to avoid races in signal handlers, the event API provides two
     variables: event_sigcb and event_gotsig.  A signal handler sets
     event_gotsig to indicate that a signal has been received.  The applica‐
     tion sets event_sigcb to a callback function.  After the signal handler
     sets event_gotsig, event_dispatch will execute the callback function to
     process received signals.  The callback returns 1 when no events are
     registered any more.  It can return -1 to indicate an error to the
     event library, causing event_dispatch() to terminate with errno set to
     EINTR.
     The function event_once() is similar to event_set().  However, it
     schedules a callback to be called exactly once and does not require the
     caller to prepare an event structure.  This function supports
     EV_TIMEOUT, EV_READ, and EV_WRITE.
     The event_pending() function can be used to check if the event speci‐
     fied by event is pending to run.  If EV_TIMEOUT was specified and tv is
     not NULL, the expiration time of the event will be returned in tv.
     The event_initialized() macro can be used to check if an event has been
     initialized.
     The event_loop function provides an interface for single pass execution
     of pending events.  The flags EVLOOP_ONCE and EVLOOP_NONBLOCK are rec‐
     ognized.  The event_loopexit function exits from the event loop. The
     next event_loop() iteration after the given timer expires will complete
     normally (handling all queued events) then exit without blocking for
     events again. Subsequent invocations of event_loop() will proceed nor‐
     mally.  The event_loopbreak function exits from the event loop immedi‐
     ately.  event_loop() will abort after the next event is completed;
     event_loopbreak() is typically invoked from this event's callback. This
     behavior is analogous to the "break;" statement. Subsequent invocations
     of event_loop() will proceed normally.
     It is the responsibility of the caller to provide these functions with
     pre-allocated event structures.
