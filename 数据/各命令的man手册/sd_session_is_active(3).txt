
       sd_session_is_active() may be used to determine whether the session
       identified by the specified session identifier is currently active
       (i.e. currently in the foreground and available for user input) or
       not.
       sd_session_is_remote() may be used to determine whether the session
       identified by the specified session identifier is a remote session
       (i.e. its remote host is known) or not.
       sd_session_get_state() may be used to determine the state of the
       session identified by the specified session identifier. The following
       states are currently known: "online" (session logged in, but session
       not active, i.e. not in the foreground), "active" (session logged in
       and active, i.e. in the foreground), "closing" (session nominally
       logged out, but some processes belonging to it are still around). In
       the future additional states might be defined, client code should be
       written to be robust in regards to additional state strings being
       returned. This function is a more generic version of
       sd_session_is_active(). The returned string needs to be freed with
       the libc free(3) call after use.
       sd_session_get_uid() may be used to determine the user identifier of
       the Unix user the session identified by the specified session
       identifier belongs to.
       sd_session_get_seat() may be used to determine the seat identifier of
       the seat the session identified by the specified session identifier
       belongs to. Note that not all sessions are attached to a seat, this
       call will fail (returning -ENODATA) for them. The returned string
       needs to be freed with the libc free(3) call after use.
       sd_session_get_service() may be used to determine the name of the
       service (as passed during PAM session setup) that registered the
       session identified by the specified session identifier. The returned
       string needs to be freed with the libc free(3) call after use.
       sd_session_get_type() may be used to determine the type of the
       session identified by the specified session identifier. The returned
       string is one of "x11", "wayland", "tty", "mir" or "unspecified" and
       needs to be freed with the libc free(3) call after use.
       sd_session_get_class() may be used to determine the class of the
       session identified by the specified session identifier. The returned
       string is one of "user", "greeter", "lock-screen", or "background"
       and needs to be freed with the libc free(3) call after use.
       sd_session_get_desktop() may be used to determine the brand of the
       desktop running on the session identified by the specified session
       identifier. This field can be set freely by desktop environments and
       does not follow any special formatting. However, desktops are
       strongly recommended to use the same identifiers and capitalization
       as for $XDG_CURRENT_DESKTOP, as defined by the Desktop Entry
       Specification[1]. The returned string needs to be freed with the libc
       free(3) call after use.
       sd_session_get_display() may be used to determine the X11 display of
       the session identified by the specified session identifier. The
       returned string needs to be freed with the libc free(3) call after
       use.
       sd_session_get_remote_host() may be used to determine the remote
       hostname of the session identified by the specified session
       identifier. The returned string needs to be freed with the libc
       free(3) call after use.
       sd_session_get_remote_user() may be used to determine the remote
       username of the session identified by the specified session
       identifier. The returned string needs to be freed with the libc
       free(3) call after use. Note that this value is rarely known to the
       system, and even then should not be relied on.
       sd_session_get_tty() may be used to determine the TTY device of the
       session identified by the specified session identifier. The returned
       string needs to be freed with the libc free(3) call after use.
       sd_session_get_vt() may be used to determine the VT number of the
       session identified by the specified session identifier. This function
       will return an error if the seat does not support VTs.
       If the session parameter of any of these functions is passed as NULL,
       the operation is executed for the session the calling process is a
       member of, if there is any.
