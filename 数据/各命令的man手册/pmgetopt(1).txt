
       pmgetopt is used to perform command line option parsing for shell
       scripts used in the Performance Co-Pilot (PCP toolkit).  It is also
       used to generate usage messages for those scripts.
       The parameters given to pmgetopt take two forms: initially, options
       specific to pmgetopt itself are passed in, and terminated using the
       -- mechanism.  Thereafter, all of the parameters passed into the
       shell script should be passed (usually this is simply the "$@"
       variable).
       The options specific to pmgetopt are as follows:
       -c,--config
            A configuration file in the format described below is passed to
            pmconfig using this option.  If this option is omitted, then
            pmconfig will read its configuration from the standard input
            stream.
       -p,--progname
            When parsing the calling shell scripts parameters, error and
            usage messages will contain the given program name rather than
            referring to pmgetopt itself as the source of the error.
       -u,--usage
            A usage message appropriate for the calling shell script to
            present as its own can be generated using the option.
       pmgetopt parses the given parameters, and produces output in a format
       suitable for sourcing in the calling shell script.  When both short
       and long forms of an argument are allowed by the specification,
       pmgetopt will always indicate the short form for simpler shell
       processing.  If arguments are presented that do not match the
       configuration, a request for a usage message (-?) will be generated
       for the calling script to respond to.  Any non-option parameters will
       be echoed back to the calling script preceded by the double-hyphen
       delimiter.  Thus a script should stop handling options when this
       delimiter is detected, and begin the handling of any non-option
       arguments.
       Unlike with the shell built-in getopt command, variables like $OPTARG
       are not set and the calling script will typically employ use of the
       shell built-in eval, set and positional shift commands to ensure
       option processing occurs correctly.
