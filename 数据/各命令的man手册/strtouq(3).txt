
       The strtoul() function converts the initial part of the string in
       nptr to an unsigned long int value according to the given base, which
       must be between 2 and 36 inclusive, or be the special value 0.
       The string may begin with an arbitrary amount of white space (as
       determined by isspace(3)) followed by a single optional '+' or '-'
       sign.  If base is zero or 16, the string may then include a "0x"
       prefix, and the number will be read in base 16; otherwise, a zero
       base is taken as 10 (decimal) unless the next character is '0', in
       which case it is taken as 8 (octal).
       The remainder of the string is converted to an unsigned long int
       value in the obvious manner, stopping at the first character which is
       not a valid digit in the given base.  (In bases above 10, the letter
       'A' in either uppercase or lowercase represents 10, 'B' represents
       11, and so forth, with 'Z' representing 35.)
       If endptr is not NULL, strtoul() stores the address of the first
       invalid character in *endptr.  If there were no digits at all,
       strtoul() stores the original value of nptr in *endptr (and returns
       0).  In particular, if *nptr is not '\0' but **endptr is '\0' on
       return, the entire string is valid.
       The strtoull() function works just like the strtoul() function but
       returns an unsigned long long int value.
