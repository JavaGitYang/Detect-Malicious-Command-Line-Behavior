
       This is usually not what an end user wants to run directly. See
       git-commit(1) instead.
       Creates a new commit object based on the provided tree object and
       emits the new commit object id on stdout. The log message is read
       from the standard input, unless -m or -F options are given.
       A commit object may have any number of parents. With exactly one
       parent, it is an ordinary commit. Having more than one parent makes
       the commit a merge between several lines of history. Initial (root)
       commits have no parents.
       While a tree represents a particular directory state of a working
       directory, a commit represents that state in "time", and explains how
       to get there.
       Normally a commit would identify a new "HEAD" state, and while Git
       doesnâ€™t care where you save the note about that state, in practice we
       tend to just write the result to the file that is pointed at by
       .git/HEAD, so that we can always see what the last committed state
       was.
