
       The pthread_exit() function terminates the calling thread and returns
       a value via retval that (if the thread is joinable) is available to
       another thread in the same process that calls pthread_join(3).
       Any clean-up handlers established by pthread_cleanup_push(3) that
       have not yet been popped, are popped (in the reverse of the order in
       which they were pushed) and executed.  If the thread has any thread-
       specific data, then, after the clean-up handlers have been executed,
       the corresponding destructor functions are called, in an unspecified
       order.
       When a thread terminates, process-shared resources (e.g., mutexes,
       condition variables, semaphores, and file descriptors) are not
       released, and functions registered using atexit(3) are not called.
       After the last thread in a process terminates, the process terminates
       as by calling exit(3) with an exit status of zero; thus, process-
       shared resources are released and functions registered using
       atexit(3) are called.
