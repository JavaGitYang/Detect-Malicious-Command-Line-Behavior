
       mremap() expands (or shrinks) an existing memory mapping, potentially
       moving it at the same time (controlled by the flags argument and the
       available virtual address space).
       old_address is the old address of the virtual memory block that you
       want to expand (or shrink).  Note that old_address has to be page
       aligned.  old_size is the old size of the virtual memory block.
       new_size is the requested size of the virtual memory block after the
       resize.  An optional fifth argument, new_address, may be provided;
       see the description of MREMAP_FIXED below.
       If the value of old_size is zero, and old_address refers to a
       shareable mapping (see mmap(2) MAP_SHARED), then mremap() will create
       a new mapping of the same pages.  new_size will be the size of the
       new mapping and the location of the new mapping may be specified with
       new_address; see the description of MREMAP_FIXED below.  If a new
       mapping is requested via this method, then the MREMAP_MAYMOVE flag
       must also be specified.
       In Linux the memory is divided into pages.  A user process has (one
       or) several linear virtual memory segments.  Each virtual memory
       segment has one or more mappings to real memory pages (in the page
       table).  Each virtual memory segment has its own protection (access
       rights), which may cause a segmentation violation if the memory is
       accessed incorrectly (e.g., writing to a read-only segment).
       Accessing virtual memory outside of the segments will also cause a
       segmentation violation.
       mremap() uses the Linux page table scheme.  mremap() changes the
       mapping between virtual addresses and memory pages.  This can be used
       to implement a very efficient realloc(3).
       The flags bit-mask argument may be 0, or include the following flag:
       MREMAP_MAYMOVE
              By default, if there is not sufficient space to expand a
              mapping at its current location, then mremap() fails.  If this
              flag is specified, then the kernel is permitted to relocate
              the mapping to a new virtual address, if necessary.  If the
              mapping is relocated, then absolute pointers into the old
              mapping location become invalid (offsets relative to the
              starting address of the mapping should be employed).
       MREMAP_FIXED (since Linux 2.3.31)
              This flag serves a similar purpose to the MAP_FIXED flag of
              mmap(2).  If this flag is specified, then mremap() accepts a
              fifth argument, void *new_address, which specifies a page-
              aligned address to which the mapping must be moved.  Any
              previous mapping at the address range specified by new_address
              and new_size is unmapped.  If MREMAP_FIXED is specified, then
              MREMAP_MAYMOVE must also be specified.
       If the memory segment specified by old_address and old_size is locked
       (using mlock(2) or similar), then this lock is maintained when the
       segment is resized and/or relocated.  As a consequence, the amount of
       memory locked by the process may change.
