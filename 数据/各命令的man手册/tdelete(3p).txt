
       The tdelete(), tfind(), tsearch(), and twalk() functions manipulate
       binary search trees. Comparisons are made with a user-supplied
       routine, the address of which is passed as the compar argument. This
       routine is called with two arguments, which are the pointers to the
       elements being compared. The application shall ensure that the user-
       supplied routine returns an integer less than, equal to, or greater
       than 0, according to whether the first argument is to be considered
       less than, equal to, or greater than the second argument.  The
       comparison function need not compare every byte, so arbitrary data
       may be contained in the elements in addition to the values being
       compared.
       The tsearch() function shall build and access the tree. The key
       argument is a pointer to an element to be accessed or stored. If
       there is a node in the tree whose element is equal to the value
       pointed to by key, a pointer to this found node shall be returned.
       Otherwise, the value pointed to by key shall be inserted (that is, a
       new node is created and the value of key is copied to this node), and
       a pointer to this node returned. Only pointers are copied, so the
       application shall ensure that the calling routine stores the data.
       The rootp argument points to a variable that points to the root node
       of the tree. A null pointer value for the variable pointed to by
       rootp denotes an empty tree; in this case, the variable shall be set
       to point to the node which shall be at the root of the new tree.
       Like tsearch(), tfind() shall search for a node in the tree,
       returning a pointer to it if found.  However, if it is not found,
       tfind() shall return a null pointer. The arguments for tfind() are
       the same as for tsearch().
       The tdelete() function shall delete a node from a binary search tree.
       The arguments are the same as for tsearch().  The variable pointed to
       by rootp shall be changed if the deleted node was the root of the
       tree. The tdelete() function shall return a pointer to the parent of
       the deleted node, or an unspecified non-null pointer if the deleted
       node was the root node, or a null pointer if the node is not found.
       If tsearch() adds an element to a tree, or tdelete() successfully
       deletes an element from a tree, the concurrent use of that tree in
       another thread, or use of pointers produced by a previous call to
       tfind() or tsearch(), produces undefined results.
       The twalk() function shall traverse a binary search tree. The root
       argument is a pointer to the root node of the tree to be traversed.
       (Any node in a tree may be used as the root for a walk below that
       node.) The argument action is the name of a routine to be invoked at
       each node. This routine is, in turn, called with three arguments. The
       first argument shall be the address of the node being visited. The
       structure pointed to by this argument is unspecified and shall not be
       modified by the application, but it shall be possible to cast a
       pointer-to-node into a pointer-to-pointer-to-element to access the
       element stored in the node.  The second argument shall be a value
       from an enumeration data type:
           typedef enum { preorder, postorder, endorder, leaf } VISIT;
       (defined in <search.h>), depending on whether this is the first,
       second, or third time that the node is visited (during a depth-first,
       left-to-right traversal of the tree), or whether the node is a leaf.
       The third argument shall be the level of the node in the tree, with
       the root being level 0.
       If the calling function alters the pointer to the root, the result is
       undefined.
       If the functions pointed to by action or compar (for any of these
       binary search functions) change the tree, the results are undefined.
       These functions are thread-safe only as long as multiple threads do
       not access the same tree.
