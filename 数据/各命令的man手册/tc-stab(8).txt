
       Size tables allow manipulation of packet sizes, as seen by the whole
       scheduler framework (of course, the actual packet size remains the
       same). Adjusted packet size is calculated only once - when a qdisc
       enqueues the packet. Initial root enqueue initializes it to the real
       packet's size.
       Each qdisc can use a different size table, but the adjusted size is
       stored in an area shared by whole qdisc hierarchy attached to the
       interface. The effect is that if you have such a setup, the last
       qdisc with a stab in a chain "wins". For example, consider HFSC with
       simple pfifo attached to one of its leaf classes.  If that pfifo
       qdisc has stab defined, it will override lengths calculated during
       HFSC's enqueue; and in turn, whenever HFSC tries to dequeue a packet,
       it will use a potentially invalid size in its calculations. Normal
       setups will usually include stab defined only on root qdisc, but
       further overriding gives extra flexibility for less usual setups.
       The initial size table is calculated by tc tool using mtu and tsize
       parameters. The algorithm sets each slot's size to the smallest power
       of 2 value, so the whole mtu is covered by the size table. Neither
       tsize, nor mtu have to be power of 2 value, so the size table will
       usually support more than is required by mtu.
       For example, with mtu = 1500 and tsize = 128, a table with 128 slots
       will be created, where slot 0 will correspond to sizes 0-16, slot 1
       to 17 - 32, ..., slot 127 to 2033 - 2048. Sizes assigned to each slot
       depend on linklayer parameter.
       Stab calculation is also safe for an unusual case, when a size
       assigned to a slot would be larger than 2^16-1 (you will lose the
       accuracy though).
       During the kernel part of packet size adjustment, overhead will be
       added to original size, and then slot will be calculated. If the size
       would cause overflow, more than 1 slot will be used to get the final
       size. This of course will affect accuracy, but it's only a guard
       against unusual situations.
       Currently there are two methods of creating values stored in the size
       table - ethernet and atm (adsl):
       ethernet
           This is basically 1-1 mapping, so following our example from
           above (disregarding mpu for a moment) slot 0 would have 8, slot 1
           would have 16 and so on, up to slot 127 with 2048. Note, that
           mpu > 0 must be specified, and slots that would get less than
           specified by mpu will get mpu instead. If you don't specify mpu,
           the size table will not be created at all (it wouldn't make any
           difference), although any overhead value will be respected during
           calculations.
       atm, adsl
           ATM linklayer consists of 53 byte cells, where each of them
           provides 48 bytes for payload. Also all the cells must be fully
           utilized, thus the last one is padded if/as necessary.
           When the size table is calculated, adjusted size that fits
           properly into lowest amount of cells is assigned to a slot. For
           example, a 100 byte long packet requires three 48-byte payloads,
           so the final size would require 3 ATM cells - 159 bytes.
           For ATM size tables, 16 bytes sized slots are perfectly enough.
           The default values of mtu and tsize create 4 bytes sized slots.
