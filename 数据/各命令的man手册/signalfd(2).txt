
       signalfd() creates a file descriptor that can be used to accept
       signals targeted at the caller.  This provides an alternative to the
       use of a signal handler or sigwaitinfo(2), and has the advantage that
       the file descriptor may be monitored by select(2), poll(2), and
       epoll(7).
       The mask argument specifies the set of signals that the caller wishes
       to accept via the file descriptor.  This argument is a signal set
       whose contents can be initialized using the macros described in
       sigsetops(3).  Normally, the set of signals to be received via the
       file descriptor should be blocked using sigprocmask(2), to prevent
       the signals being handled according to their default dispositions.
       It is not possible to receive SIGKILL or SIGSTOP signals via a
       signalfd file descriptor; these signals are silently ignored if
       specified in mask.
       If the fd argument is -1, then the call creates a new file descriptor
       and associates the signal set specified in mask with that file
       descriptor.  If fd is not -1, then it must specify a valid existing
       signalfd file descriptor, and mask is used to replace the signal set
       associated with that file descriptor.
       Starting with Linux 2.6.27, the following values may be bitwise ORed
       in flags to change the behavior of signalfd():
       SFD_NONBLOCK  Set the O_NONBLOCK file status flag on the new open
                     file description.  Using this flag saves extra calls to
                     fcntl(2) to achieve the same result.
       SFD_CLOEXEC   Set the close-on-exec (FD_CLOEXEC) flag on the new file
                     descriptor.  See the description of the O_CLOEXEC flag
                     in open(2) for reasons why this may be useful.
       In Linux up to version 2.6.26, the flags argument is unused, and must
       be specified as zero.
       signalfd() returns a file descriptor that supports the following
       operations:
       read(2)
              If one or more of the signals specified in mask is pending for
              the process, then the buffer supplied to read(2) is used to
              return one or more signalfd_siginfo structures (see below)
              that describe the signals.  The read(2) returns information
              for as many signals as are pending and will fit in the
              supplied buffer.  The buffer must be at least sizeof(struct
              signalfd_siginfo) bytes.  The return value of the read(2) is
              the total number of bytes read.
              As a consequence of the read(2), the signals are consumed, so
              that they are no longer pending for the process (i.e., will
              not be caught by signal handlers, and cannot be accepted using
              sigwaitinfo(2)).
              If none of the signals in mask is pending for the process,
              then the read(2) either blocks until one of the signals in
              mask is generated for the process, or fails with the error
              EAGAIN if the file descriptor has been made nonblocking.
       poll(2), select(2) (and similar)
              The file descriptor is readable (the select(2) readfds
              argument; the poll(2) POLLIN flag) if one or more of the
              signals in mask is pending for the process.
              The signalfd file descriptor also supports the other file-
              descriptor multiplexing APIs: pselect(2), ppoll(2), and
              epoll(7).
       close(2)
              When the file descriptor is no longer required it should be
              closed.  When all file descriptors associated with the same
              signalfd object have been closed, the resources for object are
              freed by the kernel.
   The signalfd_siginfo structure
       The format of the signalfd_siginfo structure(s) returned by read(2)s
       from a signalfd file descriptor is as follows:
           struct signalfd_siginfo {
               uint32_t ssi_signo;    /* Signal number */
               int32_t  ssi_errno;    /* Error number (unused) */
               int32_t  ssi_code;     /* Signal code */
               uint32_t ssi_pid;      /* PID of sender */
               uint32_t ssi_uid;      /* Real UID of sender */
               int32_t  ssi_fd;       /* File descriptor (SIGIO) */
               uint32_t ssi_tid;      /* Kernel timer ID (POSIX timers)
               uint32_t ssi_band;     /* Band event (SIGIO) */
               uint32_t ssi_overrun;  /* POSIX timer overrun count */
               uint32_t ssi_trapno;   /* Trap number that caused signal */
               int32_t  ssi_status;   /* Exit status or signal (SIGCHLD) */
               int32_t  ssi_int;      /* Integer sent by sigqueue(3) */
               uint64_t ssi_ptr;      /* Pointer sent by sigqueue(3) */
               uint64_t ssi_utime;    /* User CPU time consumed (SIGCHLD) */
               uint64_t ssi_stime;    /* System CPU time consumed
                                         (SIGCHLD) */
               uint64_t ssi_addr;     /* Address that generated signal
                                         (for hardware-generated signals) */
               uint16_t ssi_addr_lsb; /* Least significant bit of address
                                         (SIGBUS; since Linux 2.6.37)
               uint8_t  pad[X];       /* Pad size to 128 bytes (allow for
                                         additional fields in the future) */
           };
       Each of the fields in this structure is analogous to the similarly
       named field in the siginfo_t structure.  The siginfo_t structure is
       described in sigaction(2).  Not all fields in the returned sig‐
       nalfd_siginfo structure will be valid for a specific signal; the set
       of valid fields can be determined from the value returned in the
       ssi_code field.  This field is the analog of the siginfo_t si_code
       field; see sigaction(2) for details.
   fork(2) semantics
       After a fork(2), the child inherits a copy of the signalfd file
       descriptor.  A read(2) from the file descriptor in the child will
       return information about signals queued to the child.
   Semantics of file descriptor passing
       As with other file descriptors, signalfd file descriptors can be
       passed to another process via a UNIX domain socket (see unix(7)).  In
       the receiving process, a read(2) from the received file descriptor
       will return information about signals queued to that process.
   execve(2) semantics
       Just like any other file descriptor, a signalfd file descriptor
       remains open across an execve(2), unless it has been marked for
       close-on-exec (see fcntl(2)).  Any signals that were available for
       reading before the execve(2) remain available to the newly loaded
       program.  (This is analogous to traditional signal semantics, where a
       blocked signal that is pending remains pending across an execve(2).)
   Thread semantics
       The semantics of signalfd file descriptors in a multithreaded program
       mirror the standard semantics for signals.  In other words, when a
       thread reads from a signalfd file descriptor, it will read the sig‐
       nals that are directed to the thread itself and the signals that are
       directed to the process (i.e., the entire thread group).  (A thread
       will not be able to read signals that are directed to other threads
       in the process.)
