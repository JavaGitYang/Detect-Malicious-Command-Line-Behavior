
       The pthread_mutexattr_getrobust() and pthread_mutexattr_setrobust()
       functions, respectively, shall get and set the mutex robust
       attribute. This attribute is set in the robust parameter. Valid
       values for robust include:
       PTHREAD_MUTEX_STALLED
             No special actions are taken if the owner of the mutex is
             terminated while holding the mutex lock. This can lead to
             deadlocks if no other thread can unlock the mutex.
             This is the default value.
       PTHREAD_MUTEX_ROBUST
             If the process containing the owning thread of a robust mutex
             terminates while holding the mutex lock, the next thread that
             acquires the mutex shall be notified about the termination by
             the return value [EOWNERDEAD] from the locking function. If the
             owning thread of a robust mutex terminates while holding the
             mutex lock, the next thread that acquires the mutex may be
             notified about the termination by the return value
             [EOWNERDEAD].  The notified thread can then attempt to mark the
             state protected by the mutex as consistent again by a call to
             pthread_mutex_consistent().  After a subsequent successful call
             to pthread_mutex_unlock(), the mutex lock shall be released and
             can be used normally by other threads. If the mutex is unlocked
             without a call to pthread_mutex_consistent(), it shall be in a
             permanently unusable state and all attempts to lock the mutex
             shall fail with the error [ENOTRECOVERABLE].  The only
             permissible operation on such a mutex is
             pthread_mutex_destroy().
       The behavior is undefined if the value specified by the attr argument
       to pthread_mutexattr_getrobust() or pthread_mutexattr_setrobust()
       does not refer to an initialized mutex attributes object.
