
       The mknod() function shall create a new file named by the pathname to
       which the argument path points.
       The file type for path is OR'ed into the mode argument, and the
       application shall select one of the following symbolic constants:
                  ┌───────────┬──────────────────────────────────┐
                  │   Name    │           Description            │
                  ├───────────┼──────────────────────────────────┤
                  │S_IFIFO    │ FIFO-special                     │
                  │S_IFCHR    │ Character-special (non-portable) │
                  │S_IFDIR    │ Directory (non-portable)         │
                  │S_IFBLK    │ Block-special (non-portable)     │
                  │S_IFREG    │ Regular (non-portable)           │
                  └───────────┴──────────────────────────────────┘
       The only portable use of mknod() is to create a FIFO-special file. If
       mode is not S_IFIFO or dev is not 0, the behavior of mknod() is
       unspecified.
       The permissions for the new file are OR'ed into the mode argument,
       and may be selected from any combination of the following symbolic
       constants:
            ┌───────────┬─────────────────────────────────────────────┐
            │   Name    │                 Description                 │
            ├───────────┼─────────────────────────────────────────────┤
            │S_ISUID    │ Set user ID on execution.                   │
            │S_ISGID    │ Set group ID on execution.                  │
            │S_IRWXU    │ Read, write, or execute (search) by owner.  │
            │S_IRUSR    │ Read by owner.                              │
            │S_IWUSR    │ Write by owner.                             │
            │S_IXUSR    │ Execute (search) by owner.                  │
            │S_IRWXG    │ Read, write, or execute (search) by group.  │
            │S_IRGRP    │ Read by group.                              │
            │S_IWGRP    │ Write by group.                             │
            │S_IXGRP    │ Execute (search) by group.                  │
            │S_IRWXO    │ Read, write, or execute (search) by others. │
            │S_IROTH    │ Read by others.                             │
            │S_IWOTH    │ Write by others.                            │
            │S_IXOTH    │ Execute (search) by others.                 │
            │S_ISVTX    │ On directories, restricted deletion flag.   │
            └───────────┴─────────────────────────────────────────────┘
       The user ID of the file shall be initialized to the effective user ID
       of the process. The group ID of the file shall be initialized to
       either the effective group ID of the process or the group ID of the
       parent directory. Implementations shall provide a way to initialize
       the file's group ID to the group ID of the parent directory.
       Implementations may, but need not, provide an implementation-defined
       way to initialize the file's group ID to the effective group ID of
       the calling process. The owner, group, and other permission bits of
       mode shall be modified by the file mode creation mask of the process.
       The mknod() function shall clear each bit whose corresponding bit in
       the file mode creation mask of the process is set.
       If path names a symbolic link, mknod() shall fail and set errno to
       [EEXIST].
       Upon successful completion, mknod() shall mark for update the last
       data access, last data modification, and last file status change
       timestamps of the file. Also, the last data modification and last
       file status change timestamps of the directory that contains the new
       entry shall be marked for update.
       Only a process with appropriate privileges may invoke mknod() for
       file types other than FIFO-special.
       The mknodat() function shall be equivalent to the mknod() function
       except in the case where path specifies a relative path. In this case
       the newly created directory, special file, or regular file is located
       relative to the directory associated with the file descriptor fd
       instead of the current working directory. If the file descriptor was
       opened without O_SEARCH, the function shall check whether directory
       searches are permitted using the current permissions of the directory
       underlying the file descriptor. If the file descriptor was opened
       with O_SEARCH, the function shall not perform the check.
       If mknodat() is passed the special value AT_FDCWD in the fd
       parameter, the current working directory shall be used and the
       behavior shall be identical to a call to mknod().
