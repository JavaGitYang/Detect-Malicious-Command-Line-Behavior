
       The getmsg() function shall retrieve the contents of a message
       located at the head of the STREAM head read queue associated with a
       STREAMS file and place the contents into one or more buffers. The
       message contains either a data part, a control part, or both. The
       data and control parts of the message shall be placed into separate
       buffers, as described below. The semantics of each part are defined
       by the originator of the message.
       The getpmsg() function shall be equivalent to getmsg(), except that
       it provides finer control over the priority of the messages received.
       Except where noted, all requirements on getmsg() also pertain to
       getpmsg().
       The fildes argument specifies a file descriptor referencing a
       STREAMS-based file.
       The ctlptr and dataptr arguments each point to a strbuf structure, in
       which the buf member points to a buffer in which the data or control
       information is to be placed, and the maxlen member indicates the
       maximum number of bytes this buffer can hold. On return, the len
       member shall contain the number of bytes of data or control
       information actually received. The len member shall be set to 0 if
       there is a zero-length control or data part and len shall be set to
       −1 if no data or control information is present in the message.
       When getmsg() is called, flagsp should point to an integer that
       indicates the type of message the process is able to receive. This is
       described further below.
       The ctlptr argument is used to hold the control part of the message,
       and dataptr is used to hold the data part of the message. If ctlptr
       (or dataptr) is a null pointer or the maxlen member is −1, the
       control (or data) part of the message shall not be processed and
       shall be left on the STREAM head read queue, and if the ctlptr (or
       dataptr) is not a null pointer, len shall be set to −1. If the maxlen
       member is set to 0 and there is a zero-length control (or data) part,
       that zero-length part shall be removed from the read queue and len
       shall be set to 0. If the maxlen member is set to 0 and there are
       more than 0 bytes of control (or data) information, that information
       shall be left on the read queue and len shall be set to 0. If the
       maxlen member in ctlptr (or dataptr) is less than the control (or
       data) part of the message, maxlen bytes shall be retrieved. In this
       case, the remainder of the message shall be left on the STREAM head
       read queue and a non-zero return value shall be provided.
       By default, getmsg() shall process the first available message on the
       STREAM head read queue. However, a process may choose to retrieve
       only high-priority messages by setting the integer pointed to by
       flagsp to RS_HIPRI. In this case, getmsg() shall only process the
       next message if it is a high-priority message.  When the integer
       pointed to by flagsp is 0, any available message shall be retrieved.
       In this case, on return, the integer pointed to by flagsp shall be
       set to RS_HIPRI if a high-priority message was retrieved, or 0
       otherwise.
       For getpmsg(), the flags are different. The flagsp argument points to
       a bitmask with the following mutually-exclusive flags defined:
       MSG_HIPRI, MSG_BAND, and MSG_ANY.  Like getmsg(), getpmsg() shall
       process the first available message on the STREAM head read queue. A
       process may choose to retrieve only high-priority messages by setting
       the integer pointed to by flagsp to MSG_HIPRI and the integer pointed
       to by bandp to 0. In this case, getpmsg() shall only process the next
       message if it is a high-priority message.  In a similar manner, a
       process may choose to retrieve a message from a particular priority
       band by setting the integer pointed to by flagsp to MSG_BAND and the
       integer pointed to by bandp to the priority band of interest. In this
       case, getpmsg() shall only process the next message if it is in a
       priority band equal to, or greater than, the integer pointed to by
       bandp, or if it is a high-priority message. If a process wants to get
       the first message off the queue, the integer pointed to by flagsp
       should be set to MSG_ANY and the integer pointed to by bandp should
       be set to 0. On return, if the message retrieved was a high-priority
       message, the integer pointed to by flagsp shall be set to MSG_HIPRI
       and the integer pointed to by bandp shall be set to 0. Otherwise, the
       integer pointed to by flagsp shall be set to MSG_BAND and the integer
       pointed to by bandp shall be set to the priority band of the message.
       If O_NONBLOCK is not set, getmsg() and getpmsg() shall block until a
       message of the type specified by flagsp is available at the front of
       the STREAM head read queue. If O_NONBLOCK is set and a message of the
       specified type is not present at the front of the read queue,
       getmsg() and getpmsg() shall fail and set errno to [EAGAIN].
       If a hangup occurs on the STREAM from which messages are retrieved,
       getmsg() and getpmsg() shall continue to operate normally, as
       described above, until the STREAM head read queue is empty.
       Thereafter, they shall return 0 in the len members of ctlptr and
       dataptr.
