
       These system calls transfer data between the address space of the
       calling process ("the local process") and the process identified by
       pid ("the remote process").  The data moves directly between the
       address spaces of the two processes, without passing through kernel
       space.
       The process_vm_readv() system call transfers data from the remote
       process to the local process.  The data to be transferred is
       identified by remote_iov and riovcnt: remote_iov is a pointer to an
       array describing address ranges in the process pid, and riovcnt
       specifies the number of elements in remote_iov.  The data is
       transferred to the locations specified by local_iov and liovcnt:
       local_iov is a pointer to an array describing address ranges in the
       calling process, and liovcnt specifies the number of elements in
       local_iov.
       The process_vm_writev() system call is the converse of
       process_vm_readv()—it transfers data from the local process to the
       remote process.  Other than the direction of the transfer, the
       arguments liovcnt, local_iov, riovcnt, and remote_iov have the same
       meaning as for process_vm_readv().
       The local_iov and remote_iov arguments point to an array of iovec
       structures, defined in <sys/uio.h> as:
           struct iovec {
               void  *iov_base;    /* Starting address */
               size_t iov_len;     /* Number of bytes to transfer */
           };
       Buffers are processed in array order.  This means that
       process_vm_readv() completely fills local_iov[0] before proceeding to
       local_iov[1], and so on.  Likewise, remote_iov[0] is completely read
       before proceeding to remote_iov[1], and so on.
       Similarly, process_vm_writev() writes out the entire contents of
       local_iov[0] before proceeding to local_iov[1], and it completely
       fills remote_iov[0] before proceeding to remote_iov[1].
       The lengths of remote_iov[i].iov_len and local_iov[i].iov_len do not
       have to be the same.  Thus, it is possible to split a single local
       buffer into multiple remote buffers, or vice versa.
       The flags argument is currently unused and must be set to 0.
       The values specified in the liovcnt and riovcnt arguments must be
       less than or equal to IOV_MAX (defined in <limits.h> or accessible
       via the call sysconf(_SC_IOV_MAX)).
       The count arguments and local_iov are checked before doing any trans‐
       fers.  If the counts are too big, or local_iov is invalid, or the
       addresses refer to regions that are inaccessible to the local
       process, none of the vectors will be processed and an error will be
       returned immediately.
       Note, however, that these system calls do not check the memory
       regions in the remote process until just before doing the read/write.
       Consequently, a partial read/write (see RETURN VALUE) may result if
       one of the remote_iov elements points to an invalid memory region in
       the remote process.  No further reads/writes will be attempted beyond
       that point.  Keep this in mind when attempting to read data of
       unknown length (such as C strings that are null-terminated) from a
       remote process, by avoiding spanning memory pages (typically 4 KiB)
       in a single remote iovec element.  (Instead, split the remote read
       into two remote_iov elements and have them merge back into a single
       write local_iov entry.  The first read entry goes up to the page
       boundary, while the second starts on the next page boundary.)
       Permission to read from or write to another process is governed by a
       ptrace access mode PTRACE_MODE_ATTACH_REALCREDS check; see ptrace(2).
