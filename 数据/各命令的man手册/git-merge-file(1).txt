
       git merge-file incorporates all changes that lead from the
       <base-file> to <other-file> into <current-file>. The result
       ordinarily goes into <current-file>. git merge-file is useful for
       combining separate changes to an original. Suppose <base-file> is the
       original, and both <current-file> and <other-file> are modifications
       of <base-file>, then git merge-file combines both changes.
       A conflict occurs if both <current-file> and <other-file> have
       changes in a common segment of lines. If a conflict is found, git
       merge-file normally outputs a warning and brackets the conflict with
       lines containing <<<<<<< and >>>>>>> markers. A typical conflict will
       look like this:
           <<<<<<< A
           lines in file A
           =======
           lines in file B
           >>>>>>> B
       If there are conflicts, the user should edit the result and delete
       one of the alternatives. When --ours, --theirs, or --union option is
       in effect, however, these conflicts are resolved favouring lines from
       <current-file>, lines from <other-file>, or lines from both
       respectively. The length of the conflict markers can be given with
       the --marker-size option.
       The exit value of this program is negative on error, and the number
       of conflicts otherwise (truncated to 127 if there are more than that
       many conflicts). If the merge was clean, the exit value is 0.
       git merge-file is designed to be a minimal clone of RCS merge; that
       is, it implements all of RCS merge's functionality which is needed by
       git(1).
