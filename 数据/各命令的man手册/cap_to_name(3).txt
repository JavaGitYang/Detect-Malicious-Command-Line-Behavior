
       These functions translate a capability state between an internal
       representation and a textual one.  The internal representation is
       managed by the capability functions in working storage. The textual
       representation is a structured, human-readable string suitable for
       display.
       cap_from_text() allocates and initializes a capability state in
       working storage. It then sets the contents of this newly created
       capability state to the state represented by a human-readable, nul-
       terminated character string pointed to by buf_p.  It returns a
       pointer to the newly created capability state.  When the capability
       state in working storage is no longer required, the caller should
       free any releasable memory by calling cap_free() with cap_t as an
       argument.  The function returns an error if it cannot parse the
       contents of the string pointed to by buf_p or does not recognize any
       capability_name or flag character as valid.  The function also
       returns an error if any flag is both set and cleared within a single
       clause.
       cap_to_text() converts the capability state in working storage
       identified by cap_p into a nul-terminated human-readable string.
       This function allocates any memory necessary to contain the string,
       and returns a pointer to the string.  If the pointer len_p is not
       NULL, the function shall also return the full length of the string
       (not including the nul terminator) in the location pointed to by
       len_p.  The capability state in working storage, identified by cap_p,
       is completely represented in the character string.  When the
       capability state in working storage is no longer required, the caller
       should free any releasable memory by calling cap_free() with the
       returned string pointer as an argument.
       cap_from_name() converts a text representation of a capability, such
       as "cap_chown", to its numerical representation (CAP_CHOWN=0),
       writing the decoded value into *cap_p.  If cap_p is NULL no result is
       written, but the return code of the function indicates whether or not
       the specified capability can be represented by the library.
       cap_to_name() converts a capability index value, cap, to a libcap-
       allocated textual string. This string should be deallocated with
       cap_free().
