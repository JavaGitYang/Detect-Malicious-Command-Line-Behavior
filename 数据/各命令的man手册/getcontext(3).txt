
       In a System V-like environment, one has the two types mcontext_t and
       ucontext_t defined in <ucontext.h> and the four functions
       getcontext(), setcontext(), makecontext(3), and swapcontext(3) that
       allow user-level context switching between multiple threads of
       control within a process.
       The mcontext_t type is machine-dependent and opaque.  The ucontext_t
       type is a structure that has at least the following fields:
           typedef struct ucontext_t {
               struct ucontext_t *uc_link;
               sigset_t          uc_sigmask;
               stack_t           uc_stack;
               mcontext_t        uc_mcontext;
               ...
           } ucontext_t;
       with sigset_t and stack_t defined in <signal.h>.  Here uc_link points
       to the context that will be resumed when the current context termi‐
       nates (in case the current context was created using makecontext(3)),
       uc_sigmask is the set of signals blocked in this context (see
       sigprocmask(2)), uc_stack is the stack used by this context (see
       sigaltstack(2)), and uc_mcontext is the machine-specific representa‐
       tion of the saved context, that includes the calling thread's machine
       registers.
       The function getcontext() initializes the structure pointed at by ucp
       to the currently active context.
       The function setcontext() restores the user context pointed at by
       ucp.  A successful call does not return.  The context should have
       been obtained by a call of getcontext(), or makecontext(3), or passed
       as third argument to a signal handler.
       If the context was obtained by a call of getcontext(), program execu‐
       tion continues as if this call just returned.
       If the context was obtained by a call of makecontext(3), program exe‐
       cution continues by a call to the function func specified as the sec‐
       ond argument of that call to makecontext(3).  When the function func
       returns, we continue with the uc_link member of the structure ucp
       specified as the first argument of that call to makecontext(3).  When
       this member is NULL, the thread exits.
       If the context was obtained by a call to a signal handler, then old
       standard text says that "program execution continues with the program
       instruction following the instruction interrupted by the signal".
       However, this sentence was removed in SUSv2, and the present verdict
       is "the result is unspecified".
