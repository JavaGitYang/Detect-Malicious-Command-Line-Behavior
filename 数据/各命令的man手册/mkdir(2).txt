
       mkdir() attempts to create a directory named pathname.
       The argument mode specifies the mode for the new directory (see
       inode(7)).  It is modified by the process's umask in the usual way:
       in the absence of a default ACL, the mode of the created directory is
       (mode & ~umask & 0777).  Whether other mode bits are honored for the
       created directory depends on the operating system.  For Linux, see
       NOTES below.
       The newly created directory will be owned by the effective user ID of
       the process.  If the directory containing the file has the set-group-
       ID bit set, or if the filesystem is mounted with BSD group semantics
       (mount -o bsdgroups or, synonymously mount -o grpid), the new
       directory will inherit the group ownership from its parent; otherwise
       it will be owned by the effective group ID of the process.
       If the parent directory has the set-group-ID bit set, then so will
       the newly created directory.
   mkdirat()
       The mkdirat() system call operates in exactly the same way as
       mkdir(), except for the differences described here.
       If the pathname given in pathname is relative, then it is interpreted
       relative to the directory referred to by the file descriptor dirfd
       (rather than relative to the current working directory of the calling
       process, as is done by mkdir() for a relative pathname).
       If pathname is relative and dirfd is the special value AT_FDCWD, then
       pathname is interpreted relative to the current working directory of
       the calling process (like mkdir()).
       If pathname is absolute, then dirfd is ignored.
       See openat(2) for an explanation of the need for mkdirat().
