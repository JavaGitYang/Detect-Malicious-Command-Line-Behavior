
       The ncurses library provides several functions which let an
       application change the way input from the terminal is handled.  Some
       are global, applying to all windows.  Others apply only to a specific
       window.  Window-specific settings are not automatically applied to
       new or derived windows.  An application must apply these to each
       window, if the same behavior is needed.
   cbreak
       Normally, the tty driver buffers typed characters until a newline or
       carriage return is typed.  The cbreak routine disables line buffering
       and erase/kill character-processing (interrupt and flow control
       characters are unaffected), making characters typed by the user
       immediately available to the program.  The nocbreak routine returns
       the terminal to normal (cooked) mode.
       Initially the terminal may or may not be in cbreak mode, as the mode
       is inherited; therefore, a program should call cbreak or nocbreak
       explicitly.  Most interactive programs using curses set the cbreak
       mode.  Note that cbreak overrides raw.  [See curs_getch(3X) for a
       discussion of how these routines interact with echo and noecho.]
   echo/noecho
       The echo and noecho routines control whether characters typed by the
       user are echoed by getch(3X) as they are typed.  Echoing by the tty
       driver is always disabled, but initially getch is in echo mode, so
       characters typed are echoed.  Authors of most interactive programs
       prefer to do their own echoing in a controlled area of the screen, or
       not to echo at all, so they disable echoing by calling noecho.  [See
       curs_getch(3X) for a discussion of how these routines interact with
       cbreak and nocbreak.]
   halfdelay
       The halfdelay routine is used for half-delay mode, which is similar
       to cbreak mode in that characters typed by the user are immediately
       available to the program.  However, after blocking for tenths tenths
       of seconds, ERR is returned if nothing has been typed.  The value of
       tenths must be a number between 1 and 255.  Use nocbreak to leave
       half-delay mode.
   intrflush
       If the intrflush option is enabled (bf is TRUE), and an interrupt key
       is pressed on the keyboard (interrupt, break, quit), all output in
       the tty driver queue will be flushed, giving the effect of faster
       response to the interrupt, but causing curses to have the wrong idea
       of what is on the screen.  Disabling the option (bf is FALSE)
       prevents the flush.  The default for the option is inherited from the
       tty driver settings.  The window argument is ignored.
   keypad
       The keypad option enables the keypad of the user's terminal.  If
       enabled (bf is TRUE), the user can press a function key (such as an
       arrow key) and wgetch(3X) returns a single value representing the
       function key, as in KEY_LEFT.  If disabled (bf is FALSE), curses does
       not treat function keys specially and the program has to interpret
       the escape sequences itself.  If the keypad in the terminal can be
       turned on (made to transmit) and off (made to work locally), turning
       on this option causes the terminal keypad to be turned on when
       wgetch(3X) is called.  The default value for keypad is FALSE.
   meta
       Initially, whether the terminal returns 7 or 8 significant bits on
       input depends on the control mode of the tty driver [see termio(7)].
       To force 8 bits to be returned, invoke meta(win, TRUE); this is
       equivalent, under POSIX, to setting the CS8 flag on the terminal.  To
       force 7 bits to be returned, invoke meta(win, FALSE); this is
       equivalent, under POSIX, to setting the CS7 flag on the terminal.
       The window argument, win, is always ignored.  If the terminfo
       capabilities smm (meta_on) and rmm (meta_off) are defined for the
       terminal, smm is sent to the terminal when meta(win, TRUE) is called
       and rmm is sent when meta(win, FALSE) is called.
   nodelay
       The nodelay option causes getch to be a non-blocking call.  If no
       input is ready, getch returns ERR.  If disabled (bf is FALSE), getch
       waits until a key is pressed.
       While interpreting an input escape sequence, wgetch(3X) sets a timer
       while waiting for the next character.  If notimeout(win, TRUE) is
       called, then wgetch does not set a timer.  The purpose of the timeout
       is to differentiate between sequences received from a function key
       and those typed by a user.
   raw/noraw
       The raw and noraw routines place the terminal into or out of raw
       mode.  Raw mode is similar to cbreak mode, in that characters typed
       are immediately passed through to the user program.  The differences
       are that in raw mode, the interrupt, quit, suspend, and flow control
       characters are all passed through uninterpreted, instead of
       generating a signal.  The behavior of the BREAK key depends on other
       bits in the tty driver that are not set by curses.
   noqiflush
       When the noqiflush routine is used, normal flush of input and output
       queues associated with the INTR, QUIT and SUSP characters will not be
       done [see termio(7)].  When qiflush is called, the queues will be
       flushed when these control characters are read.  You may want to call
       noqiflush in a signal handler if you want output to continue as
       though the interrupt had not occurred, after the handler exits.
   timeout/wtimeout
       The timeout and wtimeout routines set blocking or non-blocking read
       for a given window.  If delay is negative, blocking read is used
       (i.e., waits indefinitely for input).  If delay is zero, then non-
       blocking read is used (i.e., read returns ERR if no input is
       waiting).  If delay is positive, then read blocks for delay
       milliseconds, and returns ERR if there is still no input.  Hence,
       these routines provide the same functionality as nodelay, plus the
       additional capability of being able to block for only delay
       milliseconds (where delay is positive).
   typeahead
       The curses library does “line-breakout optimization” by looking for
       typeahead periodically while updating the screen.  If input is found,
       and it is coming from a tty, the current update is postponed until
       refresh(3X) or doupdate is called again.  This allows faster response
       to commands typed in advance.  Normally, the input FILE pointer
       passed to newterm, or stdin in the case that initscr was used, will
       be used to do this typeahead checking.  The typeahead routine
       specifies that the file descriptor fd is to be used to check for
       typeahead instead.  If fd is -1, then no typeahead checking is done.
