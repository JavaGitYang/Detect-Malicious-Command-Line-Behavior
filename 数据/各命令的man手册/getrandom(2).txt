
       The getrandom() system call fills the buffer pointed to by buf with
       up to buflen random bytes.  These bytes can be used to seed user-
       space random number generators or for cryptographic purposes.
       By default, getrandom() draws entropy from the urandom source (i.e.,
       the same source as the /dev/urandom device).  This behavior can be
       changed via the flags argument.
       If the urandom source has been initialized, reads of up to 256 bytes
       will always return as many bytes as requested and will not be
       interrupted by signals.  No such guarantees apply for larger buffer
       sizes.  For example, if the call is interrupted by a signal handler,
       it may return a partially filled buffer, or fail with the error
       EINTR.
       If the urandom source has not yet been initialized, then getrandom()
       will block, unless GRND_NONBLOCK is specified in flags.
       The flags argument is a bit mask that can contain zero or more of the
       following values ORed together:
       GRND_RANDOM
              If this bit is set, then random bytes are drawn from the
              random source (i.e., the same source as the /dev/random
              device) instead of the urandom source.  The random source is
              limited based on the entropy that can be obtained from
              environmental noise.  If the number of available bytes in the
              random source is less than requested in buflen, the call
              returns just the available random bytes.  If no random bytes
              are available, the behavior depends on the presence of
              GRND_NONBLOCK in the flags argument.
       GRND_NONBLOCK
              By default, when reading from the random source, getrandom()
              blocks if no random bytes are available, and when reading from
              the urandom source, it blocks if the entropy pool has not yet
              been initialized.  If the GRND_NONBLOCK flag is set, then
              getrandom() does not block in these cases, but instead
              immediately returns -1 with errno set to EAGAIN.
