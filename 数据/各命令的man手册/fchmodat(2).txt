
       The chmod() and fchmod() system calls change a files mode bits.  (The
       file mode consists of the file permission bits plus the set-user-ID,
       set-group-ID, and sticky bits.)  These system calls differ only in
       how the file is specified:
       * chmod() changes the mode of the file specified whose pathname is
         given in pathname, which is dereferenced if it is a symbolic link.
       * fchmod() changes the mode of the file referred to by the open file
         descriptor fd.
       The new file mode is specified in mode, which is a bit mask created
       by ORing together zero or more of the following:
       S_ISUID  (04000)  set-user-ID (set process effective user ID on
                         execve(2))
       S_ISGID  (02000)  set-group-ID (set process effective group ID on
                         execve(2); mandatory locking, as described in
                         fcntl(2); take a new file's group from parent
                         directory, as described in chown(2) and mkdir(2))
       S_ISVTX  (01000)  sticky bit (restricted deletion flag, as described
                         in unlink(2))
       S_IRUSR  (00400)  read by owner
       S_IWUSR  (00200)  write by owner
       S_IXUSR  (00100)  execute/search by owner ("search" applies for
                         directories, and means that entries within the
                         directory can be accessed)
       S_IRGRP  (00040)  read by group
       S_IWGRP  (00020)  write by group
       S_IXGRP  (00010)  execute/search by group
       S_IROTH  (00004)  read by others
       S_IWOTH  (00002)  write by others
       S_IXOTH  (00001)  execute/search by others
       The effective UID of the calling process must match the owner of the
       file, or the process must be privileged (Linux: it must have the
       CAP_FOWNER capability).
       If the calling process is not privileged (Linux: does not have the
       CAP_FSETID capability), and the group of the file does not match the
       effective group ID of the process or one of its supplementary group
       IDs, the S_ISGID bit will be turned off, but this will not cause an
       error to be returned.
       As a security measure, depending on the filesystem, the set-user-ID
       and set-group-ID execution bits may be turned off if a file is
       written.  (On Linux, this occurs if the writing process does not have
       the CAP_FSETID capability.)  On some filesystems, only the superuser
       can set the sticky bit, which may have a special meaning.  For the
       sticky bit, and for set-user-ID and set-group-ID bits on directories,
       see inode(7).
       On NFS filesystems, restricting the permissions will immediately
       influence already open files, because the access control is done on
       the server, but open files are maintained by the client.  Widening
       the permissions may be delayed for other clients if attribute caching
       is enabled on them.
   fchmodat()
       The fchmodat() system call operates in exactly the same way as
       chmod(), except for the differences described here.
       If the pathname given in pathname is relative, then it is interpreted
       relative to the directory referred to by the file descriptor dirfd
       (rather than relative to the current working directory of the calling
       process, as is done by chmod() for a relative pathname).
       If pathname is relative and dirfd is the special value AT_FDCWD, then
       pathname is interpreted relative to the current working directory of
       the calling process (like chmod()).
       If pathname is absolute, then dirfd is ignored.
       flags can either be 0, or include the following flag:
       AT_SYMLINK_NOFOLLOW
              If pathname is a symbolic link, do not dereference it: instead
              operate on the link itself.  This flag is not currently
              implemented.
       See openat(2) for an explanation of the need for fchmodat().
