
       The getopt() function parses the command-line arguments.  Its
       arguments argc and argv are the argument count and array as passed to
       the main() function on program invocation.  An element of argv that
       starts with '-' (and is not exactly "-" or "--") is an option
       element.  The characters of this element (aside from the initial '-')
       are option characters.  If getopt() is called repeatedly, it returns
       successively each of the option characters from each of the option
       elements.
       The variable optind is the index of the next element to be processed
       in argv.  The system initializes this value to 1.  The caller can
       reset it to 1 to restart scanning of the same argv, or when scanning
       a new argument vector.
       If getopt() finds another option character, it returns that
       character, updating the external variable optind and a static
       variable nextchar so that the next call to getopt() can resume the
       scan with the following option character or argv-element.
       If there are no more option characters, getopt() returns -1.  Then
       optind is the index in argv of the first argv-element that is not an
       option.
       optstring is a string containing the legitimate option characters.
       If such a character is followed by a colon, the option requires an
       argument, so getopt() places a pointer to the following text in the
       same argv-element, or the text of the following argv-element, in
       optarg.  Two colons mean an option takes an optional arg; if there is
       text in the current argv-element (i.e., in the same word as the
       option name itself, for example, "-oarg"), then it is returned in
       optarg, otherwise optarg is set to zero.  This is a GNU extension.
       If optstring contains W followed by a semicolon, then -W foo is
       treated as the long option --foo.  (The -W option is reserved by
       POSIX.2 for implementation extensions.)  This behavior is a GNU
       extension, not available with libraries before glibc 2.
       By default, getopt() permutes the contents of argv as it scans, so
       that eventually all the nonoptions are at the end.  Two other modes
       are also implemented.  If the first character of optstring is '+' or
       the environment variable POSIXLY_CORRECT is set, then option
       processing stops as soon as a nonoption argument is encountered.  If
       the first character of optstring is '-', then each nonoption argv-
       element is handled as if it were the argument of an option with
       character code 1.  (This is used by programs that were written to
       expect options and other argv-elements in any order and that care
       about the ordering of the two.)  The special argument "--" forces an
       end of option-scanning regardless of the scanning mode.
       While processing the option list, getopt() can detect two kinds of
       errors: (1) an option character that was not specified in optstring
       and (2) a missing option argument (i.e., an option at the end of the
       command line without an expected argument).  Such errors are handled
       and reported as follows:
       *  By default, getopt() prints an error message on standard error,
          places the erroneous option character in optopt, and returns '?'
          as the function result.
       *  If the caller has set the global variable opterr to zero, then
          getopt() does not print an error message.  The caller can
          determine that there was an error by testing whether the function
          return value is '?'.  (By default, opterr has a nonzero value.)
       *  If the first character (following any optional '+' or '-'
          described above) of optstring is a colon (':'), then getopt()
          likewise does not print an error message.  In addition, it returns
          ':' instead of '?' to indicate a missing option argument.  This
          allows the caller to distinguish the two different types of
          errors.
   getopt_long() and getopt_long_only()
       The getopt_long() function works like getopt() except that it also
       accepts long options, started with two dashes.  (If the program
       accepts only long options, then optstring should be specified as an
       empty string (""), not NULL.)  Long option names may be abbreviated
       if the abbreviation is unique or is an exact match for some defined
       option.  A long option may take a parameter, of the form --arg=param
       or --arg param.
       longopts is a pointer to the first element of an array of struct
       option declared in <getopt.h> as
           struct option {
               const char *name;
               int         has_arg;
               int        *flag;
               int         val;
           };
       The meanings of the different fields are:
       name   is the name of the long option.
       has_arg
              is: no_argument (or 0) if the option does not take an argu‐
              ment; required_argument (or 1) if the option requires an argu‐
              ment; or optional_argument (or 2) if the option takes an
              optional argument.
       flag   specifies how results are returned for a long option.  If flag
              is NULL, then getopt_long() returns val.  (For example, the
              calling program may set val to the equivalent short option
              character.)  Otherwise, getopt_long() returns 0, and flag
              points to a variable which is set to val if the option is
              found, but left unchanged if the option is not found.
       val    is the value to return, or to load into the variable pointed
              to by flag.
       The last element of the array has to be filled with zeros.
       If longindex is not NULL, it points to a variable which is set to the
       index of the long option relative to longopts.
       getopt_long_only() is like getopt_long(), but '-' as well as "--" can
       indicate a long option.  If an option that starts with '-' (not "--")
       doesn't match a long option, but does match a short option, it is
       parsed as a short option instead.
