
       sd-login.h provides APIs to introspect and monitor seat, login
       session and user status information on the local system.
       See Multi-Seat on Linux[1] for an introduction into multi-seat
       support on Linux, the background for this set of APIs.
       Note that these APIs only allow purely passive access and monitoring
       of seats, sessions and users. To actively make changes to the seat
       configuration, terminate login sessions, or switch session on a seat
       you need to utilize the D-Bus API of systemd-logind, instead.
       These functions synchronously access data in /proc, /sys/fs/cgroup
       and /run. All of these are virtual file systems, hence the runtime
       cost of the accesses is relatively cheap.
       It is possible (and often a very good choice) to mix calls to the
       synchronous interface of sd-login.h with the asynchronous D-Bus
       interface of systemd-logind. However, if this is done you need to
       think a bit about possible races since the stream of events from
       D-Bus and from sd-login.h interfaces such as the login monitor are
       asynchronous and not ordered against each other.
       If the functions return string arrays, these are generally NULL
       terminated and need to be freed by the caller with the libc free(3)
       call after use, including the strings referenced therein. Similarly,
       individual strings returned need to be freed, as well.
       As a special exception, instead of an empty string array NULL may be
       returned, which should be treated equivalent to an empty string
       array.
       See sd_pid_get_session(3), sd_uid_get_state(3),
       sd_session_is_active(3), sd_seat_get_active(3), sd_get_seats(3),
       sd_login_monitor_new(3) for more information about the functions
       implemented.
