
       add_key() creates or updates a key of the given type and description,
       instantiates it with the payload of length plen, attaches it to the
       nominated keyring, and returns the key's serial number.
       The key may be rejected if the provided data is in the wrong format
       or it is invalid in some other way.
       If the destination keyring already contains a key that matches the
       specified type and description, then, if the key type supports it,
       that key will be updated rather than a new key being created; if not,
       a new key (with a different ID) will be created and it will displace
       the link to the extant key from the keyring.
       The destination keyring serial number may be that of a valid keyring
       for which the caller has write permission.  Alternatively, it may be
       one of the following special keyring IDs:
       KEY_SPEC_THREAD_KEYRING
              This specifies the caller's thread-specific keyring (thread-#####              keyring(7)).
              keyring(7)).
       KEY_SPEC_PROCESS_KEYRING
              This specifies the caller's process-specific keyring (process-#####              keyring(7)).
              keyring(7)).
       KEY_SPEC_SESSION_KEYRING
              This specifies the caller's session-specific keyring (session-#####              keyring(7)).
              keyring(7)).
       KEY_SPEC_USER_KEYRING
              This specifies the caller's UID-specific keyring (user-#####              keyring(7)).
              keyring(7)).
       KEY_SPEC_USER_SESSION_KEYRING
              This specifies the caller's UID-session keyring (user-session-#####              keyring(7)).
              keyring(7)).
   Key types
       The key type is a string that specifies the key's type.  Internally,
       the kernel defines a number of key types that are available in the
       core key management code.  Among the types that are available for
       user-space use and can be specified as the type argument to add_key()
       are the following:
       "keyring"
              Keyrings are special key types that may contain links to
              sequences of other keys of any type.  If this interface is
              used to create a keyring, then payload should be NULL and plen
              should be zero.
       "user" This is a general purpose key type whose payload may be read
              and updated by user-space applications.  The key is kept
              entirely within kernel memory.  The payload for keys of this
              type is a blob of arbitrary data of up to 32,767 bytes.
       "logon" (since Linux 3.3)
              This key type is essentially the same as "user", but it does
              not permit the key to read.  This is suitable for storing
              payloads that you do not want to be readable from user space.
       This key type vets the description to ensure that it is qualified by
       a "service" prefix, by checking to ensure that the description
       contains a ':' that is preceded by other characters.
       "big_key" (since Linux 3.13)
              This key type is similar to "user", but may hold a payload of
              up to 1 MiB.  If the key payload is large enough, then it may
              be stored encrypted in tmpfs (which can be swapped out) rather
              than kernel memory.
       For further details on these key types, see keyrings(7).
