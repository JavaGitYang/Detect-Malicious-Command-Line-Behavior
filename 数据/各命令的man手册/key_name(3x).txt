
   unctrl
       The unctrl routine returns a character string which is a printable
       representation of the character c, ignoring attributes.  Control
       characters are displayed in the ^X notation.  Printing characters are
       displayed as is.  The corresponding wunctrl returns a printable
       representation of a wide character.
   keyname/key_name
       The keyname routine returns a character string corresponding to the
       key c:
       ·   Printable characters are displayed as themselves, e.g., a one-
           character string containing the key.
       ·   Control characters are displayed in the ^X notation.
       ·   DEL (character 127) is displayed as ^?.
       ·   Values above 128 are either meta characters (if the screen has
           not been initialized, or if meta(3X) has been called with a TRUE
           parameter), shown in the M-X notation, or are displayed as
           themselves.  In the latter case, the values may not be printable;
           this follows the X/Open specification.
       ·   Values above 256 may be the names of the names of function keys.
       ·   Otherwise (if there is no corresponding name) the function
           returns null, to denote an error.  X/Open also lists an "UNKNOWN
           KEY" return value, which some implementations return rather than
           null.
       The corresponding key_name returns a character string corresponding
       to the wide-character value w.  The two functions do not return the
       same set of strings; the latter returns null where the former would
       display a meta character.
   filter/nofilter
       The filter routine, if used, must be called before initscr or newterm
       are called.  Calling filter causes these changes in initialization:
       ·   LINES is set to 1;
       ·   the capabilities clear, cud1, cud, cup, cuu1, cuu, vpa are
           disabled;
       ·   the capability ed is disabled if bce is set;
       ·   and the home string is set to the value of cr.
       The nofilter routine cancels the effect of a preceding filter call.
       That allows the caller to initialize a screen on a different device,
       using a different value of $TERM.  The limitation arises because the
       filter routine modifies the in-memory copy of the terminal
       information.
   use_env
       The use_env routine, if used, should be called before initscr or
       newterm are called (because those compute the screen size).  It
       modifies the way ncurses treats environment variables when
       determining the screen size.
       ·   Normally ncurses looks first at the terminal database for the
           screen size.
           If use_env was called with FALSE for parameter, it stops here
           unless use_tioctl was also called with TRUE for parameter.
       ·   Then it asks for the screen size via operating system calls.  If
           successful, it overrides the values from the terminal database.
       ·   Finally (unless use_env was called with FALSE parameter), ncurses
           examines the LINES or COLUMNS environment variables, using a
           value in those to override the results from the operating system
           or terminal database.
           Ncurses also updates the screen size in response to SIGWINCH,
           unless overridden by the LINES or COLUMNS environment variables,
   use_tioctl
       The use_tioctl routine, if used, should be called before initscr or
       newterm are called (because those compute the screen size).  After
       use_tioctl is called with TRUE as an argument, ncurses modifies the
       last step in its computation of screen size as follows:
       ·   checks if the LINES and COLUMNS environment variables are set to
           a number greater than zero.
       ·   for each, ncurses updates the corresponding environment variable
           with the value that it has obtained via operating system call or
           from the terminal database.
       ·   ncurses re-fetches the value of the environment variables so that
           it is still the environment variables which set the screen size.
       The use_env and use_tioctl routines combine as summarized here:
          use_env   use_tioctl   Summary
          ────────────────────────────────────────────────────────────────
          TRUE      FALSE        This is the default behavior.  ncurses
                                 uses operating system calls unless
                                 overridden by $LINES or $COLUMNS
                                 environment variables.
          TRUE      TRUE         ncurses updates $LINES and $COLUMNS
                                 based on operating system calls.
          FALSE     TRUE         ncurses ignores $LINES and $COLUMNS,
                                 uses operating system calls to obtain
                                 size.
          FALSE     FALSE        ncurses relies on the terminal database
                                 to determine size.
   putwin/getwin
       The putwin routine writes all data associated with window (or pad)
       win into the file to which filep points.  This information can be
       later retrieved using the getwin function.
       The getwin routine reads window related data stored in the file by
       putwin.  The routine then creates and initializes a new window using
       that data.  It returns a pointer to the new window.  There are a few
       caveats:
       ·   the data written is a copy of the WINDOW structure, and its
           associated character cells.  The format differs between the wide-
           character (ncursesw) and non-wide (ncurses) libraries.  You can
           transfer data between the two, however.
       ·   the retrieved window is always created as a top-level window (or
           pad), rather than a subwindow.
       ·   the window's character cells contain the color pair value, but
           not the actual color numbers.  If cells in the retrieved window
           use color pairs which have not been created in the application
           using init_pair, they will not be colored when the window is
           refreshed.
   delay_output
       The delay_output routine inserts an ms millisecond pause in output.
       This routine should not be used extensively because padding
       characters are used rather than a CPU pause.  If no padding character
       is specified, this uses napms to perform the delay.
   flushinp
       The flushinp routine throws away any typeahead that has been typed by
       the user and has not yet been read by the program.
