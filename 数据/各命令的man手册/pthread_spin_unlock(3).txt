
       The pthread_spin_lock() function locks the spin lock referred to by
       lock.  If the spin lock is currently unlocked, the calling thread
       acquires the lock immediately.  If the spin lock is currently locked
       by another thread, the calling thread spins, testing the lock until
       it becomes available, at which point the calling thread acquires the
       lock.
       Calling pthread_spin_lock() on a lock that is already held by the
       caller or a lock that has not been initialized with
       pthread_spin_init(3) results in undefined behavior.
       The pthread_spin_trylock() function is like pthread_spin_lock(),
       except that if the spin lock referred to by lock is currently locked,
       then, instead of spinning, the call returns immediately with the
       error EBUSY.
       The pthread_spin_unlock() function unlocks the spin lock referred to
       lock.  If any threads are spinning on the lock, one of those threads
       will then acquire the lock.
       Calling pthread_spin_unlock() on a lock that is not held by the
       caller results in undefined behavior.
