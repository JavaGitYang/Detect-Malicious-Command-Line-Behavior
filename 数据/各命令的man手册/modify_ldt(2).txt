
       modify_ldt() reads or writes the local descriptor table (LDT) for a
       process.  The LDT is an array of segment descriptors that can be
       referenced by user code.  Linux allows processes to configure a per-
       process (actually per-mm) LDT.  For more information about the LDT,
       see the Intel Software Developer's Manual or the AMD Architecture
       Programming Manual.
       When func is 0, modify_ldt() reads the LDT into the memory pointed to
       by ptr.  The number of bytes read is the smaller of bytecount and the
       actual size of the LDT, although the kernel may act as though the LDT
       is padded with additional trailing zero bytes.  On success,
       modify_ldt() will return the number of bytes read.
       When func is 1 or 0x11, modify_ldt() modifies the LDT entry indicated
       by ptr->entry_number.  ptr points to a user_desc structure and
       bytecount must equal the size of this structure.
       The user_desc structure is defined in <asm/ldt.h> as:
           struct user_desc {
               unsigned int  entry_number;
               unsigned long base_addr;
               unsigned int  limit;
               unsigned int  seg_32bit:1;
               unsigned int  contents:2;
               unsigned int  read_exec_only:1;
               unsigned int  limit_in_pages:1;
               unsigned int  seg_not_present:1;
               unsigned int  useable:1;
           };
       In Linux 2.4 and earlier, this structure was named modify_ldt_ldt_s.
       The contents field is the segment type (data, expand-down data, non-
       conforming code, or conforming code).  The other fields match their
       descriptions in the CPU manual, although modify_ldt() cannot set the
       hardware-defined "accessed" bit described in the CPU manual.
       A user_desc is considered "empty" if read_exec_only and
       seg_not_present are set to 1 and all of the other fields are 0.  An
       LDT entry can be cleared by setting it to an "empty" user_desc or, if
       func is 1, by setting both base and limit to 0.
       A conforming code segment (i.e., one with contents==3) will be
       rejected if func is 1 or if seg_not_present is 0.
       When func is 2, modify_ldt() will read zeros.  This appears to be a
       leftover from Linux 2.4.
