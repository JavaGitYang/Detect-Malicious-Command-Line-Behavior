
       Unbound threads in a process may or may not be required to be
       simultaneously active. By default, the threads implementation ensures
       that a sufficient number of threads are active so that the process
       can continue to make progress. While this conserves system resources,
       it may not produce the most effective level of concurrency.
       The pthread_setconcurrency() function allows an application to inform
       the threads implementation of its desired concurrency level,
       new_level.  The actual level of concurrency provided by the
       implementation as a result of this function call is unspecified.
       If new_level is zero, it causes the implementation to maintain the
       concurrency level at its discretion as if pthread_setconcurrency()
       had never been called.
       The pthread_getconcurrency() function shall return the value set by a
       previous call to the pthread_setconcurrency() function. If the
       pthread_setconcurrency() function was not previously called, this
       function shall return zero to indicate that the implementation is
       maintaining the concurrency level.
       A call to pthread_setconcurrency() shall inform the implementation of
       its desired concurrency level.  The implementation shall use this as
       a hint, not a requirement.
       If an implementation does not support multiplexing of user threads on
       top of several kernel-scheduled entities, the
       pthread_setconcurrency() and pthread_getconcurrency() functions are
       provided for source code compatibility but they shall have no effect
       when called. To maintain the function semantics, the new_level
       parameter is saved when pthread_setconcurrency() is called so that a
       subsequent call to pthread_getconcurrency() shall return the same
       value.
