
       sem_wait() decrements (locks) the semaphore pointed to by sem.  If
       the semaphore's value is greater than zero, then the decrement
       proceeds, and the function returns, immediately.  If the semaphore
       currently has the value zero, then the call blocks until either it
       becomes possible to perform the decrement (i.e., the semaphore value
       rises above zero), or a signal handler interrupts the call.
       sem_trywait() is the same as sem_wait(), except that if the decrement
       cannot be immediately performed, then call returns an error (errno
       set to EAGAIN) instead of blocking.
       sem_timedwait() is the same as sem_wait(), except that abs_timeout
       specifies a limit on the amount of time that the call should block if
       the decrement cannot be immediately performed.  The abs_timeout
       argument points to a structure that specifies an absolute timeout in
       seconds and nanoseconds since the Epoch, 1970-01-01 00:00:00 +0000
       (UTC).  This structure is defined as follows:
           struct timespec {
               time_t tv_sec;      /* Seconds */
               long   tv_nsec;     /* Nanoseconds [0 .. 999999999] */
           };
       If the timeout has already expired by the time of the call, and the
       semaphore could not be locked immediately, then sem_timedwait() fails
       with a timeout error (errno set to ETIMEDOUT).
       If the operation can be performed immediately, then sem_timedwait()
       never fails with a timeout error, regardless of the value of
       abs_timeout.  Furthermore, the validity of abs_timeout is not checked
       in this case.
