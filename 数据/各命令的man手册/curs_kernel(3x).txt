
       The following routines give low-level access to various curses
       capabilities.  These routines typically are used inside library
       routines.
   def_prog_mode, def_shell_mode
       The def_prog_mode and def_shell_mode routines save the current
       terminal modes as the "program" (in curses) or "shell" (not in
       curses) state for use by the reset_prog_mode and reset_shell_mode
       routines.  This is done automatically by initscr.  There is one such
       save area for each screen context allocated by newterm.
   reset_prog_mode, reset_shell_mode
       The reset_prog_mode and reset_shell_mode routines restore the
       terminal to "program" (in curses) or "shell" (out of curses) state.
       These are done automatically by endwin(3X) and, after an endwin, by
       doupdate, so they normally are not called.
   resetty, savetty
       The resetty and savetty routines save and restore the state of the
       terminal modes.  savetty saves the current state in a buffer and
       resetty restores the state to what it was at the last call to
       savetty.
   getsyx
       The getsyx routine returns the current coordinates of the virtual
       screen cursor in y and x.  If leaveok is currently TRUE, then -1,-1
       is returned.  If lines have been removed from the top of the screen,
       using ripoffline, y and x include these lines; therefore, y and x
       should be used only as arguments for setsyx.
   setsyx
       The setsyx routine sets the virtual screen cursor to y, x.  If y and
       x are both -1, then leaveok is set.  The two routines getsyx and
       setsyx are designed to be used by a library routine, which
       manipulates curses windows but does not want to change the current
       position of the program's cursor.  The library routine would call
       getsyx at the beginning, do its manipulation of its own windows, do a
       wnoutrefresh on its windows, call setsyx, and then call doupdate.
   ripoffline
       The ripoffline routine provides access to the same facility that
       slk_init [see curs_slk(3X)] uses to reduce the size of the screen.
       ripoffline must be called before initscr or newterm is called, to
       prepare these initial actions:
       路   If line is positive, a line is removed from the top of stdscr.
       路   if line is negative, a line is removed from the bottom.
       When the resulting initialization is done inside initscr, the routine
       init (supplied by the user) is called with two arguments:
       路   a window pointer to the one-line window that has been allocated
           and
       路   an integer with the number of columns in the window.
       Inside this initialization routine, the integer variables LINES and
       COLS (defined in <curses.h>) are not guaranteed to be accurate and
       wrefresh or doupdate must not be called.  It is allowable to call
       wnoutrefresh during the initialization routine.
       ripoffline can be called up to five times before calling initscr or
       newterm.
   curs_set
       The curs_set routine sets the cursor state to invisible, normal, or
       very visible for visibility equal to 0, 1, or 2 respectively.  If the
       terminal supports the visibility requested, the previous cursor state
       is returned; otherwise, ERR is returned.
   napms
       The napms routine is used to sleep for ms milliseconds.
