
       The ulimit() function shall control process limits. The process
       limits that can be controlled by this function include the maximum
       size of a single file that can be written (this is equivalent to
       using setrlimit() with RLIMIT_FSIZE). The cmd values, defined in
       <ulimit.h>, include:
       UL_GETFSIZE Return the file size limit (RLIMIT_FSIZE) of the process.
                   The limit shall be in units of 512-byte blocks and shall
                   be inherited by child processes. Files of any size can be
                   read. The return value shall be the integer part of the
                   soft file size limit divided by 512. If the result cannot
                   be represented as a long, the result is unspecified.
       UL_SETFSIZE Set the file size limit for output operations of the
                   process to the value of the second argument, taken as a
                   long, multiplied by 512. If the result would overflow an
                   rlim_t, the actual value set is unspecified. Any process
                   may decrease its own limit, but only a process with
                   appropriate privileges may increase the limit. The return
                   value shall be the integer part of the new file size
                   limit divided by 512.
       The ulimit() function shall not change the setting of errno if
       successful.
       As all return values are permissible in a successful situation, an
       application wishing to check for error situations should set errno to
       0, then call ulimit(), and, if it returns âˆ’1, check to see if errno
       is non-zero.
