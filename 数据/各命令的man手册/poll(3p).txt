
       The poll() function provides applications with a mechanism for
       multiplexing input/output over a set of file descriptors. For each
       member of the array pointed to by fds, poll() shall examine the given
       file descriptor for the event(s) specified in events.  The number of
       pollfd structures in the fds array is specified by nfds.  The poll()
       function shall identify those file descriptors on which an
       application can read or write data, or on which certain events have
       occurred.
       The fds argument specifies the file descriptors to be examined and
       the events of interest for each file descriptor. It is a pointer to
       an array with one member for each open file descriptor of interest.
       The array's members are pollfd structures within which fd specifies
       an open file descriptor and events and revents are bitmasks
       constructed by OR'ing a combination of the following event flags:
       POLLIN      Data other than high-priority data may be read without
                   blocking.
                   For STREAMS, this flag is set in revents even if the
                   message is of zero length. This flag shall be equivalent
                   to POLLRDNORM | POLLRDBAND.
       POLLRDNORM  Normal data may be read without blocking.
                   For STREAMS, data on priority band 0 may be read without
                   blocking. This flag is set in revents even if the message
                   is of zero length.
       POLLRDBAND  Priority data may be read without blocking.
                   For STREAMS, data on priority bands greater than 0 may be
                   read without blocking. This flag is set in revents even
                   if the message is of zero length.
       POLLPRI     High-priority data may be read without blocking.
                   For STREAMS, this flag is set in revents even if the
                   message is of zero length.
       POLLOUT     Normal data may be written without blocking.
                   For STREAMS, data on priority band 0 may be written
                   without blocking.
       POLLWRNORM  Equivalent to POLLOUT.
       POLLWRBAND  Priority data may be written.
                   For STREAMS, data on priority bands greater than 0 may be
                   written without blocking. If any priority band has been
                   written to on this STREAM, this event only examines bands
                   that have been written to at least once.
       POLLERR     An error has occurred on the device or stream. This flag
                   is only valid in the revents bitmask; it shall be ignored
                   in the events member.
       POLLHUP     A device has been disconnected, or a pipe or FIFO has
                   been closed by the last process that had it open for
                   writing. Once set, the hangup state of a FIFO shall
                   persist until some process opens the FIFO for writing or
                   until all read-only file descriptors for the FIFO are
                   closed. This event and POLLOUT are mutually-exclusive; a
                   stream can never be writable if a hangup has occurred.
                   However, this event and POLLIN, POLLRDNORM, POLLRDBAND,
                   or POLLPRI are not mutually-exclusive. This flag is only
                   valid in the revents bitmask; it shall be ignored in the
                   events member.
       POLLNVAL    The specified fd value is invalid. This flag is only
                   valid in the revents member; it shall ignored in the
                   events member.
       The significance and semantics of normal, priority, and high-priority
       data are file and device-specific.
       If the value of fd is less than 0, events shall be ignored, and
       revents shall be set to 0 in that entry on return from poll().
       In each pollfd structure, poll() shall clear the revents member,
       except that where the application requested a report on a condition
       by setting one of the bits of events listed above, poll() shall set
       the corresponding bit in revents if the requested condition is true.
       In addition, poll() shall set the POLLHUP, POLLERR, and POLLNVAL flag
       in revents if the condition is true, even if the application did not
       set the corresponding bit in events.
       If none of the defined events have occurred on any selected file
       descriptor, poll() shall wait at least timeout milliseconds for an
       event to occur on any of the selected file descriptors. If the value
       of timeout is 0, poll() shall return immediately. If the value of
       timeout is âˆ’1, poll() shall block until a requested event occurs or
       until the call is interrupted.
       Implementations may place limitations on the granularity of timeout
       intervals. If the requested timeout interval requires a finer
       granularity than the implementation supports, the actual timeout
       interval shall be rounded up to the next supported value.
       The poll() function shall not be affected by the O_NONBLOCK flag.
       The poll() function shall support regular files, terminal and pseudo-
       terminal devices, FIFOs, pipes, sockets and STREAMS-based files.  The
       behavior of poll() on elements of fds that refer to other types of
       file is unspecified.
       Regular files shall always poll TRUE for reading and writing.
       A file descriptor for a socket that is listening for connections
       shall indicate that it is ready for reading, once connections are
       available.  A file descriptor for a socket that is connecting
       asynchronously shall indicate that it is ready for writing, once a
       connection has been established.
