
   sched_setattr()
       The sched_setattr() system call sets the scheduling policy and
       associated attributes for the thread whose ID is specified in pid.
       If pid equals zero, the scheduling policy and attributes of the
       calling thread will be set.
       Currently, Linux supports the following "normal" (i.e., non-real-
       time) scheduling policies as values that may be specified in policy:
       SCHED_OTHER   the standard round-robin time-sharing policy;
       SCHED_BATCH   for "batch" style execution of processes; and
       SCHED_IDLE    for running very low priority background jobs.
       Various "real-time" policies are also supported, for special time-
       critical applications that need precise control over the way in which
       runnable threads are selected for execution.  For the rules governing
       when a process may use these policies, see sched(7).  The real-time
       policies that may be specified in policy are:
       SCHED_FIFO    a first-in, first-out policy; and
       SCHED_RR      a round-robin policy.
       Linux also provides the following policy:
       SCHED_DEADLINE
                     a deadline scheduling policy; see sched(7) for details.
       The attr argument is a pointer to a structure that defines the new
       scheduling policy and attributes for the specified thread.  This
       structure has the following form:
           struct sched_attr {
               u32 size;              /* Size of this structure */
               u32 sched_policy;      /* Policy (SCHED_*) */
               u64 sched_flags;       /* Flags */
               s32 sched_nice;        /* Nice value (SCHED_OTHER,
                                         SCHED_BATCH) */
               u32 sched_priority;    /* Static priority (SCHED_FIFO,
                                         SCHED_RR) */
               /* Remaining fields are for SCHED_DEADLINE */
               u64 sched_runtime;
               u64 sched_deadline;
               u64 sched_period;
           };
       The fields of this structure are as follows:
       size   This field should be set to the size of the structure in
              bytes, as in sizeof(struct sched_attr).  If the provided
              structure is smaller than the kernel structure, any additional
              fields are assumed to be '0'.  If the provided structure is
              larger than the kernel structure, the kernel verifies that all
              additional fields are 0; if they are not, sched_setattr()
              fails with the error E2BIG and updates size to contain the
              size of the kernel structure.
              The above behavior when the size of the user-space sched_attr
              structure does not match the size of the kernel structure
              allows for future extensibility of the interface.  Malformed
              applications that pass oversize structures won't break in the
              future if the size of the kernel sched_attr structure is
              increased.  In the future, it could also allow applications
              that know about a larger user-space sched_attr structure to
              determine whether they are running on an older kernel that
              does not support the larger structure.
       sched_policy
              This field specifies the scheduling policy, as one of the
              SCHED_* values listed above.
       sched_flags
              This field contains flags controlling scheduling behavior.
              Only one such flag is currently defined:
              SCHED_FLAG_RESET_ON_FORK.  As a result of including this flag,
              children created by fork(2) do not inherit privileged schedul‐
              ing policies.  See sched(7) for details.
       sched_nice
              This field specifies the nice value to be set when specifying
              sched_policy as SCHED_OTHER or SCHED_BATCH.  The nice value is
              a number in the range -20 (high priority) to +19 (low prior‐
              ity); see sched(7).
       sched_priority
              This field specifies the static priority to be set when speci‐
              fying sched_policy as SCHED_FIFO or SCHED_RR.  The allowed
              range of priorities for these policies can be determined using
              sched_get_priority_min(2) and sched_get_priority_max(2).  For
              other policies, this field must be specified as 0.
       sched_runtime
              This field specifies the "Runtime" parameter for deadline
              scheduling.  The value is expressed in nanoseconds.  This
              field, and the next two fields, are used only for SCHED_DEAD‐
              LINE scheduling; for further details, see sched(7).
       sched_deadline
              This field specifies the "Deadline" parameter for deadline
              scheduling.  The value is expressed in nanoseconds.
       sched_period
              This field specifies the "Period" parameter for deadline
              scheduling.  The value is expressed in nanoseconds.
       The flags argument is provided to allow for future extensions to the
       interface; in the current implementation it must be specified as 0.
   sched_getattr()
       The sched_getattr() system call fetches the scheduling policy and the
       associated attributes for the thread whose ID is specified in pid.
       If pid equals zero, the scheduling policy and attributes of the call‐
       ing thread will be retrieved.
       The size argument should be set to the size of the sched_attr struc‐
       ture as known to user space.  The value must be at least as large as
       the size of the initially published sched_attr structure, or the call
       fails with the error EINVAL.
       The retrieved scheduling attributes are placed in the fields of the
       sched_attr structure pointed to by attr.  The kernel sets attr.size
       to the size of its sched_attr structure.
       If the caller-provided attr buffer is larger than the kernel's
       sched_attr structure, the additional bytes in the user-space struc‐
       ture are not touched.  If the caller-provided structure is smaller
       than the kernel sched_attr structure and the kernel needs to return
       values outside the provided space, sched_getattr() fails with the
       error E2BIG.  As with sched_setattr(), these semantics allow for
       future extensibility of the interface.
       The flags argument is provided to allow for future extensions to the
       interface; in the current implementation it must be specified as 0.
