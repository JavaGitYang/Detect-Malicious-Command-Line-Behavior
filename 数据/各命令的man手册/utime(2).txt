
       Note: modern applications may prefer to use the interfaces described
       in utimensat(2).
       The utime() system call changes the access and modification times of
       the inode specified by filename to the actime and modtime fields of
       times respectively.
       If times is NULL, then the access and modification times of the file
       are set to the current time.
       Changing timestamps is permitted when: either the process has
       appropriate privileges, or the effective user ID equals the user ID
       of the file, or times is NULL and the process has write permission
       for the file.
       The utimbuf structure is:
           struct utimbuf {
               time_t actime;       /* access time */
               time_t modtime;      /* modification time */
           };
       The utime() system call allows specification of timestamps with a
       resolution of 1 second.
       The utimes() system call is similar, but the times argument refers to
       an array rather than a structure.  The elements of this array are
       timeval structures, which allow a precision of 1 microsecond for
       specifying timestamps.  The timeval structure is:
           struct timeval {
               long tv_sec;        /* seconds */
               long tv_usec;       /* microseconds */
           };
       times[0] specifies the new access time, and times[1] specifies the
       new modification time.  If times is NULL, then analogously to
       utime(), the access and modification times of the file are set to the
       current time.
