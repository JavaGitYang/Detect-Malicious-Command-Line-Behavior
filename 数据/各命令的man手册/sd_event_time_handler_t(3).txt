
       sd_event_add_time() adds a new timer event source to an event loop.
       The event loop object is specified in the event parameter, the event
       source object is returned in the source parameter. The clock
       parameter takes a clock identifier, one of CLOCK_REALTIME,
       CLOCK_MONOTONIC, CLOCK_BOOTTIME, CLOCK_REALTIME_ALARM, or
       CLOCK_BOOTTIME_ALARM. See timerfd_create(2) for details regarding the
       various types of clocks. The usec parameter specifies the earliest
       time, in microseconds (µs), relative to the clock's epoch, when the
       timer shall be triggered. If a time already in the past is specified
       (including 0), this timer source "fires" immediately and is ready to
       be dispatched. If the parameter is specified as UINT64_MAX the timer
       event will never elapse, which may be used as an alternative to
       explicitly disabling a timer event source with
       sd_event_source_set_enabled(3). The accuracy parameter specifies an
       additional accuracy value in µs specifying how much the timer event
       may be delayed. Use 0 to select the default accuracy (250ms). Use 1µs
       for maximum accuracy. Consider specifying 60000000µs (1min) or larger
       for long-running events that may be delayed substantially. Picking
       higher accuracy values allows the system to coalesce timer events
       more aggressively, improving power efficiency. The handler parameter
       shall reference a function to call when the timer elapses. The
       handler function will be passed the userdata pointer, which may be
       chosen freely by the caller. The handler is also passed the
       configured trigger time, even if it is actually called slightly
       later, subject to the specified accuracy value, the kernel timer
       slack (see prctl(2)), and additional scheduling latencies. To query
       the actual time the handler was called use sd_event_now(3).
       By default, the timer will elapse once (SD_EVENT_ONESHOT), but this
       may be changed with sd_event_source_set_enabled(3). If the handler
       function returns a negative error code, it will be disabled after the
       invocation, even if the SD_EVENT_ON mode was requested before. Note
       that a timer event set to SD_EVENT_ON will fire continuously unless
       its configured time is updated using sd_event_source_set_time().
       To destroy an event source object use sd_event_source_unref(3), but
       note that the event source is only removed from the event loop when
       all references to the event source are dropped. To make sure an event
       source does not fire anymore, even if it is still referenced, disable
       the event source using sd_event_source_set_enabled(3) with
       SD_EVENT_OFF.
       If the second parameter of sd_event_add_time() is NULL no reference
       to the event source object is returned. In this case the event source
       is considered "floating", and will be destroyed implicitly when the
       event loop itself is destroyed.
       If the handler to sd_event_add_time() is NULL, and the event source
       fires, this will be considered a request to exit the event loop. In
       this case, the userdata parameter, cast to an integer, is used for
       the exit code passed to sd_event_exit(3).
       Use CLOCK_BOOTTIME_ALARM and CLOCK_REALTIME_ALARM to define event
       sources that may wake up the system from suspend.
       In order to set up relative timers (that is, relative to the current
       time), retrieve the current time via sd_event_now(3), add the desired
       timespan to it, and use the result as the usec parameter to
       sd_event_add_time().
       In order to set up repetitive timers (that is, timers that are
       triggered in regular intervals), set up the timer normally, for the
       first invocation. Each time the event handler is invoked, update the
       timer's trigger time with sd_event_source_set_time(3) for the next
       timer iteration, and reenable the timer using
       sd_event_source_set_enabled(). To calculate the next point in time to
       pass to sd_event_source_set_time(), either use as base the usec
       parameter passed to the timer callback, or the timestamp returned by
       sd_event_now(). In the former case timer events will be regular,
       while in the latter case the scheduling latency will keep
       accumulating on the timer.
       sd_event_source_get_time() retrieves the configured time value of an
       event source created previously with sd_event_add_time(). It takes
       the event source object and a pointer to a variable to store the time
       in, relative to the selected clock's epoch, in µs.
       sd_event_source_set_time() changes the time of an event source
       created previously with sd_event_add_time(). It takes the event
       source object and a time relative to the selected clock's epoch, in
       µs.
       sd_event_source_get_time_accuracy() retrieves the configured accuracy
       value of an event source created previously with sd_event_add_time().
       It takes the event source object and a pointer to a variable to store
       the accuracy in. The accuracy is specified in µs.
       sd_event_source_set_time_accuracy() changes the configured accuracy
       of a timer event source created previously with sd_event_add_time().
       It takes the event source object and accuracy, in µs.
       sd_event_source_get_time_clock() retrieves the configured clock of an
       event source created previously with sd_event_add_time(). It takes
       the event source object and a pointer to a variable to store the
       clock identifier in.
